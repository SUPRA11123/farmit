{"ast":null,"code":"var _jsxFileName = \"C:\\\\ISEP\\\\3\\xBA ANO\\\\2\\xBA SEMESTRE\\\\PESTI\\\\AgroSensor\\\\farmit\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\Utilities\\\\Maps.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Maps extends React.Component {\n  async componentDidMount() {\n    // check if any field already exists\n\n    const fields = await this.getFields(this.props.farmDetails.id);\n    console.log(fields);\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      mapTypeId: \"satellite\",\n      center: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      zoom: 15\n    });\n    const marker = new window.google.maps.Marker({\n      position: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      map: map\n      //change the color of the label\n    });\n\n    if (fields.length > 0) {\n      fields.forEach(field => {\n        if (field.rectangle === \"rectangle\") {\n          const coordinates = field.coordinates.split(\";\");\n          const rectangle = new window.google.maps.Rectangle({\n            strokeColor: \"#0ba837\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#0ba837\",\n            fillOpacity: 0.35,\n            map,\n            bounds: {\n              north: parseFloat(coordinates[0]),\n              south: parseFloat(coordinates[2]),\n              east: parseFloat(coordinates[1]),\n              west: parseFloat(coordinates[3])\n            }\n          });\n          rectangle.addListener(\"click\", () => {\n            this.showData();\n          });\n          const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\n          const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\n          const marker = new window.google.maps.Marker({\n            position: {\n              lat: lat,\n              lng: lng\n            },\n            map: map,\n            label: {\n              text: field.name,\n              color: \"#ffffff\",\n              fontWeight: \"bold\",\n              fontSize: \"10px\"\n            },\n            icon: {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              scale: 0\n            }\n          });\n        } else {\n          // separate the coordinates by ;\n          const coordinates = field.coordinates.split(\";\");\n\n          // split each coordinate by ,\n          const coordinatesArray = coordinates.map(coordinate => {\n            return coordinate.split(\",\");\n          });\n\n          // add each coordinate to the path\n          const path = [];\n          coordinatesArray.forEach(coordinate => {\n            path.push({\n              lat: parseFloat(coordinate[0]),\n              lng: parseFloat(coordinate[1])\n            });\n          });\n\n          // create polygon\n          const polygon = new window.google.maps.Polygon({\n            strokeColor: \"#0ba837\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#0ba837\",\n            fillOpacity: 0.35,\n            map,\n            path: path\n          });\n          polygon.addListener(\"click\", () => {\n            this.showData();\n          });\n        }\n      });\n    }\n    this.initDrawing(map);\n  }\n  getFields(id) {\n    return axios.get(\"http://localhost:8000/getfieldsbyid/\" + id + \"/\").then(res => {\n      console.log(res);\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  initDrawing(map) {\n    // allow drawing on map\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      // add drawing options here\n      drawingControlOptions: {\n        drawingModes: [window.google.maps.drawing.OverlayType.POLYGON, window.google.maps.drawing.OverlayType.RECTANGLE],\n        // add labels to drawing options\n        position: window.google.maps.ControlPosition.TOP_CENTER\n      },\n      polygonOptions: {\n        editable: true,\n        draggable: true,\n        clickable: true,\n        strokeColor: \"#0ba837\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#0ba837\",\n        fillOpacity: 0.35\n      },\n      rectangleOptions: {\n        editable: true,\n        draggable: true,\n        clickable: true,\n        strokeColor: \"#0ba837\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#0ba837\",\n        fillOpacity: 0.35\n      }\n    });\n    window.google.maps.event.addListener(drawingManager, 'polygoncomplete', polygon => {\n      drawingManager.setDrawingMode(null);\n      drawingManager.setOptions({\n        drawingControl: false\n      });\n      const popup = document.createElement('div');\n      popup.classList.add('popup');\n      const message = document.createElement('p');\n      message.textContent = 'Do you want to add this polygon?';\n      const acceptButton = document.createElement('button');\n      acceptButton.textContent = 'Add';\n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      acceptButton.addEventListener('click', () => {\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n        polygon.setEditable(false);\n        popup.remove();\n        document.getElementById(\"createField\").classList.remove(\"hidden\");\n\n        // await for the user to submit the form\n        const formSubmitPromise = new Promise(resolve => {\n          document.getElementById(\"createField\").addEventListener(\"submit\", event => {\n            event.preventDefault();\n            resolve(); // resolve the promise when the form is submitted\n          });\n        });\n\n        formSubmitPromise.then(() => {\n          const paths = polygon.getPaths();\n          var vertices = [];\n          for (var i = 0; i < paths.getLength(); i++) {\n            var path = paths.getAt(i);\n            for (var j = 0; j < path.getLength(); j++) {\n              var vertex = path.getAt(j);\n              vertices.push({\n                lat: vertex.lat(),\n                lng: vertex.lng()\n              });\n            }\n          }\n\n          // convert the vertices to a string\n          const coordinates = vertices.map(vertex => {\n            return vertex.lat + \",\" + vertex.lng;\n          }).join(\";\");\n\n          // get the form data\n          const fieldName = document.getElementById(\"fieldName\").value;\n          const cropType = document.getElementById(\"cropType\").value;\n\n          // call the backend to add the coordinates\n          axios.post('http://localhost:8000/createfield/', {\n            name: fieldName,\n            crop_type: cropType,\n            type: \"polygon\",\n            coordinates: coordinates,\n            farm: this.props.farmDetails.id\n          }).then(res => {\n            console.log(res);\n          }).catch(err => {\n            console.log(err);\n            polygon.setMap(null);\n          });\n\n          // add click listener to the rectangle\n          polygon.addListener(\"click\", () => {\n            this.showData();\n          });\n          document.getElementById(\"fieldName\").value = \"\";\n          document.getElementById(\"cropType\").value = \"\";\n\n          // allow drawing again\n          drawingManager.setOptions({\n            drawingControl: true\n          });\n        });\n      });\n      polygon.addListener(\"click\", () => {\n        polygon.setMap(null);\n        // allow drawing again\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n      });\n      cancelButton.addEventListener('click', () => {\n        polygon.setMap(null);\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        popup.remove();\n      });\n      popup.appendChild(message);\n      popup.appendChild(acceptButton);\n      popup.appendChild(cancelButton);\n\n      // show the popup on the div, but outside the map\n      document.getElementById(\"add\").appendChild(popup);\n    });\n    // add event listener to drawing manager rectangle\n    window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', rectangle => {\n      // disable drawing mode\n      drawingManager.setDrawingMode(null);\n      drawingManager.setOptions({\n        drawingControl: false\n      });\n      const popup = document.createElement('div');\n      popup.classList.add('popup');\n      const message = document.createElement('p');\n      message.textContent = 'Do you want to add this rectangle?';\n      const acceptButton = document.createElement('button');\n      acceptButton.textContent = 'Add';\n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      acceptButton.addEventListener('click', () => {\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n        rectangle.setEditable(false);\n        popup.remove();\n        document.getElementById(\"createField\").classList.remove(\"hidden\");\n\n        // await for the user to submit the form\n        const formSubmitPromise = new Promise(resolve => {\n          document.getElementById(\"createField\").addEventListener(\"submit\", event => {\n            event.preventDefault();\n            resolve(); // resolve the promise when the form is submitted\n          });\n        });\n\n        formSubmitPromise.then(() => {\n          const bounds = rectangle.getBounds();\n          const coordinates = {\n            north: bounds.getNorthEast().lat(),\n            east: bounds.getNorthEast().lng(),\n            south: bounds.getSouthWest().lat(),\n            west: bounds.getSouthWest().lng()\n          };\n          const lat = (parseFloat(coordinates.north) + parseFloat(coordinates.south)) / 2;\n          const lng = (parseFloat(coordinates.east) + parseFloat(coordinates.west)) / 2;\n          const marker = new window.google.maps.Marker({\n            position: {\n              lat: lat,\n              lng: lng\n            },\n            map: map,\n            label: {\n              text: document.getElementById(\"fieldName\").value,\n              color: \"#ffffff\",\n              fontWeight: \"bold\",\n              fontSize: \"10px\"\n            },\n            icon: {\n              path: window.google.maps.SymbolPath.CIRCLE,\n              scale: 0\n            }\n          });\n\n          // convert coordinates string with ; to array\n          const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\n\n          // get the form data\n          const fieldName = document.getElementById(\"fieldName\").value;\n          const cropType = document.getElementById(\"cropType\").value;\n\n          // call the backend to add the coordinates\n          axios.post('http://localhost:8000/createfield/', {\n            name: fieldName,\n            crop_type: cropType,\n            type: \"rectangle\",\n            coordinates: coordinatesString,\n            farm: this.props.farmDetails.id\n          }).then(res => {\n            console.log(res);\n          }).catch(err => {\n            console.log(err);\n            rectangle.setMap(null);\n          });\n\n          // add click listener to the rectangle\n          rectangle.addListener(\"click\", () => {\n            this.showData();\n          });\n          document.getElementById(\"fieldName\").value = \"\";\n          document.getElementById(\"cropType\").value = \"\";\n\n          // allow drawing again\n          drawingManager.setOptions({\n            drawingControl: true\n          });\n        });\n      });\n      cancelButton.addEventListener('click', () => {\n        rectangle.setMap(null);\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        popup.remove();\n      });\n      popup.appendChild(message);\n      popup.appendChild(acceptButton);\n      popup.appendChild(cancelButton);\n\n      // show the popup on the div, but outside the map\n      document.getElementById(\"add\").appendChild(popup);\n    });\n    drawingManager.setMap(map);\n  }\n  createField(event) {\n    event.preventDefault();\n    document.getElementById(\"createField\").classList.add(\"hidden\");\n  }\n\n  /*cancel() {\r\n      document.getElementById(\"createField\").classList.add(\"hidden\");\r\n  }*/\n\n  showData() {\n    console.log(\"show data\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Maps\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"createField\",\n          className: \"hidden\",\n          onSubmit: this.createField,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"name\",\n            id: \"fieldName\",\n            placeholder: \"Field Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"crop_type\",\n            id: \"cropType\",\n            placeholder: \"Crop Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"loginInBtn\",\n            type: \"submit\",\n            value: \"Create Field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"cancelBtn\",\n            type: \"button\",\n            value: \"Cancel\",\n            onClick: this.cancel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false);\n  }\n}\nexport default Maps;","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Maps","Component","componentDidMount","fields","getFields","props","farmDetails","id","console","log","map","window","google","maps","Map","document","getElementById","mapTypeId","center","lat","latitude","lng","longitude","zoom","marker","Marker","position","length","forEach","field","rectangle","coordinates","split","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","bounds","north","parseFloat","south","east","west","addListener","showData","label","text","name","color","fontWeight","fontSize","icon","path","SymbolPath","CIRCLE","scale","coordinatesArray","coordinate","push","polygon","Polygon","initDrawing","get","then","res","data","catch","err","drawingManager","drawing","DrawingManager","drawingControlOptions","drawingModes","OverlayType","POLYGON","RECTANGLE","ControlPosition","TOP_CENTER","polygonOptions","editable","draggable","clickable","rectangleOptions","event","setDrawingMode","setOptions","drawingControl","popup","createElement","classList","add","message","textContent","acceptButton","cancelButton","addEventListener","setEditable","remove","formSubmitPromise","Promise","resolve","preventDefault","paths","getPaths","vertices","i","getLength","getAt","j","vertex","join","fieldName","value","cropType","post","crop_type","type","farm","setMap","appendChild","getBounds","getNorthEast","getSouthWest","coordinatesString","createField","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","required","placeholder","onClick","cancel"],"sources":["C:/ISEP/3º ANO/2º SEMESTRE/PESTI/AgroSensor/farmit/frontend/src/components/Dashboard/Utilities/Maps.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass Maps extends React.Component {\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        // check if any field already exists\r\n\r\n        const fields = await this.getFields(this.props.farmDetails.id);\r\n\r\n        console.log(fields);\r\n\r\n        const map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n\r\n            mapTypeId: \"satellite\",\r\n            center: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            zoom: 15,\r\n        });\r\n\r\n\r\n        const marker = new window.google.maps.Marker({\r\n            position: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            map: map,\r\n            //change the color of the label\r\n        });\r\n\r\n\r\n        if (fields.length > 0) {\r\n            fields.forEach((field) => {\r\n\r\n                if (field.rectangle === \"rectangle\") {\r\n              \r\n\r\n                const coordinates = field.coordinates.split(\";\");\r\n\r\n                const rectangle = new window.google.maps.Rectangle({\r\n                    strokeColor: \"#0ba837\",\r\n                    strokeOpacity: 0.8,\r\n                    strokeWeight: 2,\r\n                    fillColor: \"#0ba837\",\r\n                    fillOpacity: 0.35,\r\n                    map,\r\n                    bounds: {\r\n                        north: parseFloat(coordinates[0]),\r\n                        south: parseFloat(coordinates[2]),\r\n                        east: parseFloat(coordinates[1]),\r\n                        west: parseFloat(coordinates[3]),\r\n                    },\r\n                });\r\n\r\n                rectangle.addListener(\"click\", () => {\r\n                   this.showData();\r\n                });\r\n\r\n                const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\r\n                const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\r\n                \r\n                const marker = new window.google.maps.Marker({\r\n                    position: { lat: lat, lng: lng},\r\n                    map: map,\r\n                    label: {  \r\n                        text: field.name,\r\n                        color: \"#ffffff\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"10px\",\r\n                    },\r\n                    icon: {\r\n                        path: window.google.maps.SymbolPath.CIRCLE,\r\n                        scale: 0,\r\n                    },\r\n                   \r\n                });\r\n\r\n            }else{\r\n\r\n                // separate the coordinates by ;\r\n                const coordinates = field.coordinates.split(\";\");\r\n\r\n                \r\n\r\n                // split each coordinate by ,\r\n                const coordinatesArray = coordinates.map((coordinate) => {\r\n                    return coordinate.split(\",\");\r\n                });\r\n\r\n\r\n                // add each coordinate to the path\r\n                const path = [];\r\n                coordinatesArray.forEach((coordinate) => {\r\n                    path.push({ lat: parseFloat(coordinate[0]), lng: parseFloat(coordinate[1]) });\r\n                });\r\n\r\n\r\n                \r\n                // create polygon\r\n                const polygon = new window.google.maps.Polygon({\r\n                    strokeColor: \"#0ba837\",\r\n                    strokeOpacity: 0.8,\r\n                    strokeWeight: 2,\r\n                    fillColor: \"#0ba837\",\r\n                    fillOpacity: 0.35,\r\n                    map,\r\n                    path: path,\r\n                });\r\n\r\n\r\n                polygon.addListener(\"click\", () => {\r\n                    this.showData();\r\n                });\r\n\r\n            }\r\n\r\n            });\r\n        }\r\n        this.initDrawing(map);\r\n    }\r\n\r\n    getFields(id) {\r\n        return axios\r\n            .get(\"http://localhost:8000/getfieldsbyid/\" + id + \"/\")\r\n            .then((res) => {\r\n                console.log(res);\r\n                return res.data;\r\n            }\r\n            )\r\n            .catch((err) => {\r\n                console.log(err);\r\n            }\r\n            );\r\n    }\r\n\r\n    initDrawing(map) {\r\n\r\n        // allow drawing on map\r\n        const drawingManager = new window.google.maps.drawing.DrawingManager({\r\n            // add drawing options here\r\n            drawingControlOptions: {\r\n                drawingModes: [\r\n                    window.google.maps.drawing.OverlayType.POLYGON,\r\n                    window.google.maps.drawing.OverlayType.RECTANGLE,\r\n                ],\r\n                // add labels to drawing options\r\n                position: window.google.maps.ControlPosition.TOP_CENTER,\r\n            },\r\n            polygonOptions: {\r\n                editable: true,\r\n                draggable: true,\r\n                clickable: true,\r\n                strokeColor: \"#0ba837\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: \"#0ba837\",\r\n                fillOpacity: 0.35,\r\n            },\r\n\r\n            rectangleOptions: {\r\n                editable: true,\r\n                draggable: true,\r\n                clickable: true,\r\n                strokeColor: \"#0ba837\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: \"#0ba837\",\r\n                fillOpacity: 0.35,\r\n            }\r\n\r\n        });\r\n        \r\n\r\n        window.google.maps.event.addListener(drawingManager, 'polygoncomplete', (polygon) => {\r\n\r\n            drawingManager.setDrawingMode(null);\r\n            drawingManager.setOptions({\r\n                drawingControl: false,\r\n            });\r\n\r\n            const popup = document.createElement('div');\r\n            popup.classList.add('popup');\r\n\r\n            const message = document.createElement('p');\r\n            message.textContent = 'Do you want to add this polygon?';\r\n\r\n            const acceptButton = document.createElement('button');\r\n            acceptButton.textContent = 'Add';\r\n\r\n            const cancelButton = document.createElement('button');\r\n            cancelButton.textContent = 'Cancel';\r\n\r\n\r\n            acceptButton.addEventListener('click', () => {\r\n\r\n                drawingManager.setOptions({\r\n                    drawingControl: false,\r\n                });\r\n\r\n                polygon.setEditable(false);\r\n\r\n                popup.remove();\r\n                document.getElementById(\"createField\").classList.remove(\"hidden\");\r\n\r\n                // await for the user to submit the form\r\n                const formSubmitPromise = new Promise((resolve) => {\r\n                    document.getElementById(\"createField\").addEventListener(\"submit\", (event) => {\r\n                        event.preventDefault();\r\n                        resolve(); // resolve the promise when the form is submitted\r\n                    });\r\n                });\r\n\r\n                formSubmitPromise.then(() => {\r\n\r\n\r\n                    const paths = polygon.getPaths();\r\n                    var vertices = [];\r\n\r\n                    for (var i = 0; i < paths.getLength(); i++) {\r\n                        var path = paths.getAt(i);\r\n        \r\n                        for (var j = 0; j < path.getLength(); j++) {\r\n                            var vertex = path.getAt(j);\r\n                            vertices.push({ lat: vertex.lat(), lng: vertex.lng() });\r\n                        }\r\n                    }\r\n                    \r\n\r\n                    // convert the vertices to a string\r\n                    const coordinates = vertices.map((vertex) => {\r\n                        return vertex.lat + \",\" + vertex.lng;\r\n                    }).join(\";\");\r\n\r\n\r\n                    // get the form data\r\n                    const fieldName = document.getElementById(\"fieldName\").value;\r\n                    const cropType = document.getElementById(\"cropType\").value;\r\n\r\n                    // call the backend to add the coordinates\r\n                    axios.post('http://localhost:8000/createfield/', {\r\n                        name: fieldName,\r\n                        crop_type: cropType,\r\n                        type: \"polygon\",\r\n                        coordinates: coordinates,\r\n                        farm: this.props.farmDetails.id,\r\n                    }).then((res) => {\r\n                        console.log(res);\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                        polygon.setMap(null);\r\n                    });\r\n\r\n\r\n                    // add click listener to the rectangle\r\n                    polygon.addListener(\"click\", () => {\r\n                        this.showData();\r\n                    });\r\n\r\n                    document.getElementById(\"fieldName\").value = \"\";\r\n                    document.getElementById(\"cropType\").value = \"\";\r\n\r\n\r\n                    // allow drawing again\r\n                    drawingManager.setOptions({\r\n                        drawingControl: true,\r\n                    });\r\n                });\r\n            });\r\n\r\n            polygon.addListener(\"click\", () => {\r\n                polygon.setMap(null);\r\n                // allow drawing again\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n            });\r\n\r\n            cancelButton.addEventListener('click', () => {\r\n                polygon.setMap(null);\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                popup.remove();\r\n            });\r\n\r\n            popup.appendChild(message);\r\n            popup.appendChild(acceptButton);\r\n            popup.appendChild(cancelButton);\r\n\r\n            // show the popup on the div, but outside the map\r\n            document.getElementById(\"add\").appendChild(popup);\r\n\r\n            \r\n        });\r\n        // add event listener to drawing manager rectangle\r\n        window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', (rectangle) => {\r\n\r\n            // disable drawing mode\r\n            drawingManager.setDrawingMode(null);\r\n            drawingManager.setOptions({\r\n                drawingControl: false,\r\n            });\r\n\r\n\r\n            const popup = document.createElement('div');\r\n            popup.classList.add('popup');\r\n\r\n            const message = document.createElement('p');\r\n            message.textContent = 'Do you want to add this rectangle?';\r\n\r\n            const acceptButton = document.createElement('button');\r\n            acceptButton.textContent = 'Add';\r\n\r\n            const cancelButton = document.createElement('button');\r\n            cancelButton.textContent = 'Cancel';\r\n\r\n\r\n            acceptButton.addEventListener('click', () => {\r\n                \r\n                drawingManager.setOptions({\r\n                    drawingControl: false,\r\n                });\r\n\r\n                rectangle.setEditable(false);\r\n\r\n                popup.remove();\r\n                document.getElementById(\"createField\").classList.remove(\"hidden\");\r\n\r\n                // await for the user to submit the form\r\n                const formSubmitPromise = new Promise((resolve) => {\r\n                    document.getElementById(\"createField\").addEventListener(\"submit\", (event) => {\r\n                        event.preventDefault();\r\n                        resolve(); // resolve the promise when the form is submitted\r\n                    });\r\n                });\r\n            \r\n                formSubmitPromise.then(() => {\r\n\r\n\r\n                const bounds = rectangle.getBounds();\r\n                const coordinates = {\r\n                    north: bounds.getNorthEast().lat(),\r\n                    east: bounds.getNorthEast().lng(),\r\n                    south: bounds.getSouthWest().lat(),\r\n                    west: bounds.getSouthWest().lng(),\r\n                };\r\n\r\n                const lat = (parseFloat(coordinates.north) + parseFloat(coordinates.south)) / 2;\r\n                const lng = (parseFloat(coordinates.east) + parseFloat(coordinates.west)) / 2;\r\n\r\n                const marker = new window.google.maps.Marker({\r\n                    position: { lat: lat, lng: lng},\r\n                    map: map,\r\n                    label: {  \r\n                        text: document.getElementById(\"fieldName\").value,\r\n                        color: \"#ffffff\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"10px\",\r\n                    },\r\n                    icon: {\r\n                        path: window.google.maps.SymbolPath.CIRCLE,\r\n                        scale: 0,\r\n                    },\r\n                   \r\n                });\r\n\r\n\r\n                // convert coordinates string with ; to array\r\n                const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\r\n\r\n                // get the form data\r\n                const fieldName = document.getElementById(\"fieldName\").value;\r\n                const cropType = document.getElementById(\"cropType\").value;\r\n                \r\n\r\n                // call the backend to add the coordinates\r\n                axios.post('http://localhost:8000/createfield/', {\r\n                    name: fieldName,\r\n                    crop_type: cropType,\r\n                    type: \"rectangle\",\r\n                    coordinates: coordinatesString,\r\n                    farm: this.props.farmDetails.id,\r\n                }).then((res) => {\r\n                    console.log(res);\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                    rectangle.setMap(null);\r\n                });\r\n\r\n            \r\n                // add click listener to the rectangle\r\n                rectangle.addListener(\"click\", () => {\r\n                    this.showData();\r\n                });\r\n\r\n                document.getElementById(\"fieldName\").value = \"\";\r\n                document.getElementById(\"cropType\").value = \"\";\r\n\r\n\r\n                // allow drawing again\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n            });\r\n            });\r\n\r\n            cancelButton.addEventListener('click', () => {\r\n                rectangle.setMap(null);\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                popup.remove();\r\n            });\r\n\r\n            popup.appendChild(message);\r\n            popup.appendChild(acceptButton);\r\n            popup.appendChild(cancelButton);\r\n\r\n           // show the popup on the div, but outside the map\r\n            document.getElementById(\"add\").appendChild(popup);\r\n\r\n        });\r\n\r\n        drawingManager.setMap(map);\r\n    }\r\n\r\n    createField(event) {\r\n        event.preventDefault();\r\n        \r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n        \r\n    }\r\n\r\n    /*cancel() {\r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n    }*/\r\n\r\n    showData() {\r\n        console.log(\"show data\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <><><h1>Maps</h1>\r\n\r\n            <div id =\"add\"></div>\r\n\r\n                <form id=\"createField\" className=\"hidden\" onSubmit={this.createField}>\r\n                    <input required type=\"text\" name=\"name\" id=\"fieldName\" placeholder=\"Field Name\" />\r\n                    <input required type=\"text\" name=\"crop_type\" id=\"cropType\" placeholder=\"Crop Type\" />\r\n                    <input id=\"loginInBtn\" type=\"submit\" value=\"Create Field\" />\r\n                    <input id=\"cancelBtn\" type=\"button\" value=\"Cancel\" onClick={this.cancel}/>\r\n                </form>\r\n\r\n                <div id=\"map\">\r\n\r\n\r\n                </div></>\r\n\r\n\r\n\r\n            </>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Maps;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}