{"ast":null,"code":"var _jsxFileName = \"C:\\\\ISEP\\\\3\\xBA ANO\\\\2\\xBA SEMESTRE\\\\PESTI\\\\AgroSensor\\\\farmit\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\Utilities\\\\Maps.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Maps extends React.Component {\n  async componentDidMount() {\n    // check if any field already exists\n\n    const fields = await this.getFields(this.props.farmDetails.id);\n    console.log(fields);\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      mapTypeId: \"satellite\",\n      center: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      zoom: 15\n    });\n    const marker = new window.google.maps.Marker({\n      position: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      map: map\n      //change the color of the label\n    });\n\n    if (fields.length > 0) {\n      fields.forEach(field => {\n        // add a marker for each field\n\n        const coordinates = field.coordinates.split(\";\");\n        console.log(coordinates);\n        const rectangle = new window.google.maps.Rectangle({\n          strokeColor: \"#0ba837\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#0ba837\",\n          fillOpacity: 0.35,\n          map,\n          bounds: {\n            north: parseFloat(coordinates[0]),\n            south: parseFloat(coordinates[2]),\n            east: parseFloat(coordinates[1]),\n            west: parseFloat(coordinates[3])\n          }\n        });\n        rectangle.addListener(\"click\", () => {\n          this.showData();\n        });\n        const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\n        const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\n        const marker = new window.google.maps.Marker({\n          position: {\n            lat: lat,\n            lng: lng\n          },\n          map: map,\n          label: field.name\n        });\n        console.log(rectangle);\n      });\n    }\n    this.initDrawing(map);\n  }\n  getFields(id) {\n    return axios.get(\"http://localhost:8000/getfieldsbyid/\" + id + \"/\").then(res => {\n      console.log(res);\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  initDrawing(map) {\n    // allow drawing on map\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      // add drawing options here\n      drawingControlOptions: {\n        drawingModes: [window.google.maps.drawing.OverlayType.POLYGON, window.google.maps.drawing.OverlayType.RECTANGLE],\n        // add labels to drawing options\n        position: window.google.maps.ControlPosition.TOP_CENTER\n      },\n      polygonOptions: {\n        editable: true,\n        draggable: true,\n        clickable: true\n      },\n      rectangleOptions: {\n        editable: true,\n        draggable: true,\n        clickable: true,\n        strokeColor: \"#0ba837\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#0ba837\",\n        fillOpacity: 0.35\n      }\n    });\n    window.google.maps.event.addListener(drawingManager, 'polygoncomplete', polygon => {\n      // open a pop up to confirm or cancel the polygon\n\n      console.log(polygon);\n      polygon.addListener(\"click\", () => {\n        polygon.setMap(null);\n        // allow drawing again\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n      });\n    });\n\n    // add event listener to drawing manager rectangle\n    window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', rectangle => {\n      // disable drawing mode\n      drawingManager.setDrawingMode(null);\n      drawingManager.setOptions({\n        drawingControl: false\n      });\n      const popup = document.createElement('div');\n      popup.classList.add('popup');\n      const message = document.createElement('p');\n      message.textContent = 'Do you want to add this rectangle?';\n      const acceptButton = document.createElement('button');\n      acceptButton.textContent = 'Add';\n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      acceptButton.addEventListener('click', () => {\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n        rectangle.setEditable(false);\n        popup.remove();\n        document.getElementById(\"createField\").classList.remove(\"hidden\");\n\n        // await for the user to submit the form\n        const formSubmitPromise = new Promise(resolve => {\n          document.getElementById(\"createField\").addEventListener(\"submit\", event => {\n            event.preventDefault();\n            resolve(); // resolve the promise when the form is submitted\n          });\n        });\n\n        formSubmitPromise.then(() => {\n          const bounds = rectangle.getBounds();\n          const coordinates = {\n            north: bounds.getNorthEast().lat(),\n            east: bounds.getNorthEast().lng(),\n            south: bounds.getSouthWest().lat(),\n            west: bounds.getSouthWest().lng()\n          };\n          console.log(coordinates);\n          const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\n          const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\n\n          // convert coordinates string with ; to array\n          const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\n          console.log(coordinatesString);\n\n          // get the form data\n          const fieldName = document.getElementById(\"fieldName\").value;\n          const cropType = document.getElementById(\"cropType\").value;\n          console.log(fieldName);\n          console.log(cropType);\n\n          // call the backend to add the coordinates\n          axios.post('http://localhost:8000/createfield/', {\n            name: fieldName,\n            crop_type: cropType,\n            type: \"rectangle\",\n            coordinates: coordinatesString,\n            farm: this.props.farmDetails.id\n          }).then(res => {\n            console.log(res);\n          }).catch(err => {\n            console.log(err);\n            rectangle.setMap(null);\n          });\n\n          // add click listener to the rectangle\n          rectangle.addListener(\"click\", () => {\n            this.showData();\n          });\n          document.getElementById(\"fieldName\").value = \"\";\n          document.getElementById(\"cropType\").value = \"\";\n\n          // allow drawing again\n          drawingManager.setOptions({\n            drawingControl: true\n          });\n        });\n      });\n      cancelButton.addEventListener('click', () => {\n        rectangle.setMap(null);\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        popup.remove();\n      });\n      popup.appendChild(message);\n      popup.appendChild(acceptButton);\n      popup.appendChild(cancelButton);\n\n      // show the popup on the div, but outside the map\n      document.getElementById(\"add\").appendChild(popup);\n    });\n    drawingManager.setMap(map);\n  }\n  createField(event) {\n    event.preventDefault();\n    console.log(\"create field\");\n    document.getElementById(\"createField\").classList.add(\"hidden\");\n  }\n\n  /*cancel() {\r\n      document.getElementById(\"createField\").classList.add(\"hidden\");\r\n  }*/\n\n  showData() {\n    console.log(\"show data\");\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Maps\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"createField\",\n          className: \"hidden\",\n          onSubmit: this.createField,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"name\",\n            id: \"fieldName\",\n            placeholder: \"Field Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"crop_type\",\n            id: \"cropType\",\n            placeholder: \"Crop Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"loginInBtn\",\n            type: \"submit\",\n            value: \"Create Field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"cancelBtn\",\n            type: \"button\",\n            value: \"Cancel\",\n            onClick: this.cancel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false);\n  }\n}\nexport default Maps;","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Maps","Component","componentDidMount","fields","getFields","props","farmDetails","id","console","log","map","window","google","maps","Map","document","getElementById","mapTypeId","center","lat","latitude","lng","longitude","zoom","marker","Marker","position","length","forEach","field","coordinates","split","rectangle","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","bounds","north","parseFloat","south","east","west","addListener","showData","label","name","initDrawing","get","then","res","data","catch","err","drawingManager","drawing","DrawingManager","drawingControlOptions","drawingModes","OverlayType","POLYGON","RECTANGLE","ControlPosition","TOP_CENTER","polygonOptions","editable","draggable","clickable","rectangleOptions","event","polygon","setMap","setOptions","drawingControl","setDrawingMode","popup","createElement","classList","add","message","textContent","acceptButton","cancelButton","addEventListener","setEditable","remove","formSubmitPromise","Promise","resolve","preventDefault","getBounds","getNorthEast","getSouthWest","coordinatesString","fieldName","value","cropType","post","crop_type","type","farm","appendChild","createField","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","required","placeholder","onClick","cancel"],"sources":["C:/ISEP/3º ANO/2º SEMESTRE/PESTI/AgroSensor/farmit/frontend/src/components/Dashboard/Utilities/Maps.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nclass Maps extends React.Component {\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        // check if any field already exists\r\n\r\n        const fields = await this.getFields(this.props.farmDetails.id);\r\n\r\n        console.log(fields);\r\n\r\n        const map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n\r\n            mapTypeId: \"satellite\",\r\n            center: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            zoom: 15,\r\n        });\r\n\r\n\r\n        const marker = new window.google.maps.Marker({\r\n            position: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            map: map,\r\n            //change the color of the label\r\n        });\r\n\r\n\r\n        if (fields.length > 0) {\r\n            fields.forEach((field) => {\r\n\r\n                // add a marker for each field\r\n              \r\n\r\n                const coordinates = field.coordinates.split(\";\");\r\n                console.log(coordinates);\r\n\r\n                const rectangle = new window.google.maps.Rectangle({\r\n                    strokeColor: \"#0ba837\",\r\n                    strokeOpacity: 0.8,\r\n                    strokeWeight: 2,\r\n                    fillColor: \"#0ba837\",\r\n                    fillOpacity: 0.35,\r\n                    map,\r\n                    bounds: {\r\n                        north: parseFloat(coordinates[0]),\r\n                        south: parseFloat(coordinates[2]),\r\n                        east: parseFloat(coordinates[1]),\r\n                        west: parseFloat(coordinates[3]),\r\n                    },\r\n                });\r\n\r\n                rectangle.addListener(\"click\", () => {\r\n                   this.showData();\r\n                });\r\n\r\n                const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\r\n                const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\r\n\r\n                const marker = new window.google.maps.Marker({\r\n                    position: { lat: lat, lng: lng},\r\n                    map: map,\r\n                    label: field.name,\r\n                });\r\n\r\n                console.log(rectangle);\r\n\r\n            })\r\n        }\r\n\r\n        this.initDrawing(map);\r\n\r\n    }\r\n\r\n    getFields(id) {\r\n        return axios\r\n            .get(\"http://localhost:8000/getfieldsbyid/\" + id + \"/\")\r\n            .then((res) => {\r\n                console.log(res);\r\n                return res.data;\r\n            }\r\n            )\r\n            .catch((err) => {\r\n                console.log(err);\r\n            }\r\n            );\r\n    }\r\n\r\n    initDrawing(map) {\r\n\r\n        // allow drawing on map\r\n        const drawingManager = new window.google.maps.drawing.DrawingManager({\r\n            // add drawing options here\r\n            drawingControlOptions: {\r\n                drawingModes: [\r\n                    window.google.maps.drawing.OverlayType.POLYGON,\r\n                    window.google.maps.drawing.OverlayType.RECTANGLE,\r\n                ],\r\n                // add labels to drawing options\r\n                position: window.google.maps.ControlPosition.TOP_CENTER,\r\n            },\r\n            polygonOptions: {\r\n                editable: true,\r\n                draggable: true,\r\n                clickable: true,\r\n            },\r\n\r\n            rectangleOptions: {\r\n                editable: true,\r\n                draggable: true,\r\n                clickable: true,\r\n                strokeColor: \"#0ba837\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: \"#0ba837\",\r\n                fillOpacity: 0.35,\r\n            }\r\n\r\n        });\r\n        \r\n\r\n        window.google.maps.event.addListener(drawingManager, 'polygoncomplete', (polygon) => {\r\n            // open a pop up to confirm or cancel the polygon\r\n\r\n            console.log(polygon);\r\n            polygon.addListener(\"click\", () => {\r\n                polygon.setMap(null);\r\n                // allow drawing again\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n            });\r\n        });\r\n\r\n        // add event listener to drawing manager rectangle\r\n        window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', (rectangle) => {\r\n\r\n            // disable drawing mode\r\n            drawingManager.setDrawingMode(null);\r\n            drawingManager.setOptions({\r\n                drawingControl: false,\r\n            });\r\n\r\n\r\n            const popup = document.createElement('div');\r\n            popup.classList.add('popup');\r\n\r\n            const message = document.createElement('p');\r\n            message.textContent = 'Do you want to add this rectangle?';\r\n\r\n            const acceptButton = document.createElement('button');\r\n            acceptButton.textContent = 'Add';\r\n\r\n            const cancelButton = document.createElement('button');\r\n            cancelButton.textContent = 'Cancel';\r\n\r\n\r\n            acceptButton.addEventListener('click', () => {\r\n                \r\n                drawingManager.setOptions({\r\n                    drawingControl: false,\r\n                });\r\n\r\n                rectangle.setEditable(false);\r\n\r\n                popup.remove();\r\n                document.getElementById(\"createField\").classList.remove(\"hidden\");\r\n\r\n                // await for the user to submit the form\r\n                const formSubmitPromise = new Promise((resolve) => {\r\n                    document.getElementById(\"createField\").addEventListener(\"submit\", (event) => {\r\n                        event.preventDefault();\r\n                        resolve(); // resolve the promise when the form is submitted\r\n                    });\r\n                });\r\n            \r\n                formSubmitPromise.then(() => {\r\n\r\n\r\n                const bounds = rectangle.getBounds();\r\n                const coordinates = {\r\n                    north: bounds.getNorthEast().lat(),\r\n                    east: bounds.getNorthEast().lng(),\r\n                    south: bounds.getSouthWest().lat(),\r\n                    west: bounds.getSouthWest().lng(),\r\n                };\r\n                console.log(coordinates);\r\n\r\n                const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\r\n                const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\r\n\r\n                // convert coordinates string with ; to array\r\n                const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\r\n\r\n                console.log(coordinatesString);\r\n\r\n                // get the form data\r\n                const fieldName = document.getElementById(\"fieldName\").value;\r\n                const cropType = document.getElementById(\"cropType\").value;\r\n\r\n                console.log(fieldName);\r\n                console.log(cropType);\r\n                \r\n\r\n                // call the backend to add the coordinates\r\n                axios.post('http://localhost:8000/createfield/', {\r\n                    name: fieldName,\r\n                    crop_type: cropType,\r\n                    type: \"rectangle\",\r\n                    coordinates: coordinatesString,\r\n                    farm: this.props.farmDetails.id,\r\n                }).then((res) => {\r\n                    console.log(res);\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                    rectangle.setMap(null);\r\n                });\r\n\r\n                // add click listener to the rectangle\r\n                rectangle.addListener(\"click\", () => {\r\n                    this.showData();\r\n                });\r\n\r\n                document.getElementById(\"fieldName\").value = \"\";\r\n                document.getElementById(\"cropType\").value = \"\";\r\n\r\n\r\n                // allow drawing again\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n            });\r\n            });\r\n\r\n            cancelButton.addEventListener('click', () => {\r\n                rectangle.setMap(null);\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                popup.remove();\r\n            });\r\n\r\n            popup.appendChild(message);\r\n            popup.appendChild(acceptButton);\r\n            popup.appendChild(cancelButton);\r\n\r\n           // show the popup on the div, but outside the map\r\n            document.getElementById(\"add\").appendChild(popup);\r\n\r\n        });\r\n\r\n        drawingManager.setMap(map);\r\n    }\r\n\r\n    createField(event) {\r\n        event.preventDefault();\r\n\r\n        console.log(\"create field\");\r\n        \r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n\r\n            \r\n        \r\n    }\r\n\r\n    /*cancel() {\r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n    }*/\r\n\r\n    showData() {\r\n        console.log(\"show data\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <><><h1>Maps</h1>\r\n\r\n            <div id =\"add\"></div>\r\n\r\n                <form id=\"createField\" className=\"hidden\" onSubmit={this.createField}>\r\n                    <input required type=\"text\" name=\"name\" id=\"fieldName\" placeholder=\"Field Name\" />\r\n                    <input required type=\"text\" name=\"crop_type\" id=\"cropType\" placeholder=\"Crop Type\" />\r\n                    <input id=\"loginInBtn\" type=\"submit\" value=\"Create Field\" />\r\n                    <input id=\"cancelBtn\" type=\"button\" value=\"Cancel\" onClick={this.cancel}/>\r\n                </form>\r\n\r\n                <div id=\"map\">\r\n\r\n\r\n                </div></>\r\n\r\n\r\n\r\n            </>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Maps;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}