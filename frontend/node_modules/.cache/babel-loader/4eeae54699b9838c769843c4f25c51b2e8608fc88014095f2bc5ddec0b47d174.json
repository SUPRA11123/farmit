{"ast":null,"code":"var _jsxFileName = \"/Users/ewanallison/Desktop/FarmIT/github/Untitled/frontend/src/components/Dashboard/Utilities/Maps.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Modal from \"./Modal\";\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nimport { point } from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst URL = process.env.REACT_APP_URL;\nclass Maps extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalOpen: false,\n      sensor_latitude: null,\n      sensor_longitude: null\n    };\n  }\n  async componentDidMount() {\n    await this.sensorLocationQuery();\n\n    // check if any field already exists\n    var fields;\n    const role = this.props.user.role;\n    if (role === \"field manager\") {\n      fields = await this.getFieldsByManager(this.props.user.id);\n    } else {\n      fields = await this.getFields(this.props.farmDetails.id);\n    }\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      mapTypeId: \"satellite\",\n      center: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      zoom: 15,\n      streetViewControl: false,\n      mapTypeControl: false\n    });\n    map.addListener(\"click\", event => {\n      this.showClickedCoordinates(event.latLng);\n    });\n    const marker = new window.google.maps.Marker({\n      position: {\n        lat: this.props.farmDetails.latitude,\n        lng: this.props.farmDetails.longitude\n      },\n      map: map,\n      label: {\n        fontFamily: 'Fontawesome',\n        text: '\\uf015',\n        color: 'white'\n      }\n    });\n    var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\n    var centreMap = document.getElementById(\"centreToMap\");\n    centreMap.addEventListener(\"click\", () => {\n      map.setCenter(marker.getPosition());\n      map.setZoom(15);\n    });\n    if (fields.length > 0) {\n      fields.forEach(field => {\n        var row = table.insertRow(0);\n        var cell1 = row.insertCell(0);\n        cell1.innerHTML = \"<span>\" + field.name + \"</span>\";\n        var cell2 = row.insertCell(1);\n        cell2.innerHTML = \"<span>\" + field.area + \" m<sup>2 </span>\";\n        var cell3 = row.insertCell(2);\n        cell3.innerHTML = \"<span>\" + field.crop_type + \"</span>\";\n        var cell4 = row.insertCell(3);\n        cell4.innerHTML = '<i class=\"fa-solid fa-ellipsis-vertical\"></i>';\n        if (field.type === \"rectangle\") {\n          const coordinates = field.coordinates.split(\";\");\n          const rectangleBounds = coordinates.map(parseFloat);\n          console.log(rectangleBounds);\n          const rectangle = new window.google.maps.Rectangle({\n            strokeColor: \"#0ba837\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#0ba837\",\n            fillOpacity: 0.35,\n            map,\n            bounds: {\n              north: parseFloat(coordinates[0]),\n              south: parseFloat(coordinates[2]),\n              east: parseFloat(coordinates[1]),\n              west: parseFloat(coordinates[3])\n            },\n            isComplete: false\n          });\n          this.state.sensors.forEach(sensor => {\n            // check if the sensor is inside the rectangle\n            if (this.isPointInsideRectangle(sensor, rectangleBounds)) {\n              // add a little point in the rectangle in the point position\n              const marker = new window.google.maps.Marker({\n                position: {\n                  lat: sensor.latitude,\n                  lng: sensor.longitude\n                },\n                map: map,\n                // make a dot\n                icon: {\n                  path: window.google.maps.SymbolPath.CIRCLE,\n                  //ADD COOL SENSOR HERE\n                  scale: 5,\n                  fillColor: \"#000000\",\n                  fillOpacity: 1,\n                  strokeWeight: 0,\n                  clickable: true\n                  // add a label to the dot\n                }\n              });\n\n              // on click, open the modal\n              marker.addListener(\"click\", () => {\n                this.showData(sensor);\n              });\n            }\n          });\n          rectangle.addListener(\"mouseover\", () => {\n            this.highlightRow(field.name);\n          });\n          rectangle.addListener(\"mouseout\", () => {\n            this.unhighlightRow(field.name);\n          });\n          rectangle.addListener(\"click\", event => {\n            this.showClickedCoordinates(event.latLng);\n          });\n          const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\n          const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\n\n          /*const marker = new window.google.maps.Marker({\r\n              position: { lat: lat, lng: lng },\r\n              map: map,\r\n              label: {\r\n                  text: field.name,\r\n                  color: \"#ffffff\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"10px\",\r\n              },\r\n              icon: {\r\n                  path: window.google.maps.SymbolPath.CIRCLE,\r\n                  scale: 0,\r\n              },\r\n            });*/\n\n          row.addEventListener(\"click\", () => {\n            map.setCenter({\n              lat: lat,\n              lng: lng\n            });\n            map.setZoom(15);\n          });\n        } else {\n          // separate the coordinates by ;\n          const coordinates = field.coordinates.split(\";\");\n\n          // split each coordinate by ,\n          const coordinatesArray = coordinates.map(coordinate => {\n            return coordinate.split(\",\");\n          });\n\n          // add each coordinate to the path\n          const path = [];\n          coordinatesArray.forEach(coordinate => {\n            path.push({\n              lat: parseFloat(coordinate[0]),\n              lng: parseFloat(coordinate[1])\n            });\n          });\n\n          // create polygon\n          const polygon = new window.google.maps.Polygon({\n            paths: coordinates.map(coord => {\n              const [lat, lng] = coord.split(\",\");\n              return {\n                lat: parseFloat(lat),\n                lng: parseFloat(lng)\n              };\n            }),\n            strokeColor: \"#0ba837\",\n            strokeOpacity: 0.8,\n            strokeWeight: 2,\n            fillColor: \"#0ba837\",\n            fillOpacity: 0.35,\n            map,\n            path: path,\n            isComplete: false\n          });\n          const polygonCoordinates = coordinates.map(coord => {\n            const [lat, lng] = coord.split(\",\");\n            return {\n              lat: parseFloat(lat),\n              lng: parseFloat(lng)\n            };\n          });\n          console.log(\"Polygon Coordinates:\", polygonCoordinates);\n          this.state.sensors.forEach(sensor => {\n            // check if the sensor is inside the rectangle\n            if (this.isPointInsidePolygon(sensor, polygonCoordinates)) {\n              console.log(\"Sensor inside polygon\");\n\n              // add a little point in the rectangle in the point position\n              const marker = new window.google.maps.Marker({\n                position: {\n                  lat: sensor.latitude,\n                  lng: sensor.longitude\n                },\n                map: map,\n                // make a dot\n                icon: {\n                  path: window.google.maps.SymbolPath.CIRCLE,\n                  scale: 5,\n                  fillColor: \"#000000\",\n                  fillOpacity: 1,\n                  strokeWeight: 0,\n                  clickable: true\n                }\n              });\n\n              // on click, open the modal\n              marker.addListener(\"click\", () => {\n                this.showData(sensor);\n              });\n            }\n          });\n          polygon.addListener(\"mouseover\", () => {\n            this.highlightRow(field.name);\n          });\n          polygon.addListener(\"mouseout\", () => {\n            this.unhighlightRow(field.name);\n          });\n          polygon.addListener(\"click\", event => {\n            this.showClickedCoordinates(event.latLng);\n          });\n          const bounds = new window.google.maps.LatLngBounds();\n          const polygonPath = polygon.getPath();\n          polygonPath.forEach(latLng => {\n            bounds.extend(latLng);\n          });\n          const polygonCenter = bounds.getCenter();\n          row.addEventListener(\"click\", () => {\n            map.setCenter(polygonCenter);\n            map.setZoom(15);\n          });\n        }\n      });\n    }\n    this.initDrawing(map);\n  }\n  sensorLocationQuery() {\n    return new Promise((resolve, reject) => {\n      const influxDB = new InfluxDB({\n        url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n        token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\"\n      });\n      const queryApi = influxDB.getQueryApi(\"FarmIT\");\n      const sensorLocationQuery = `\n            from(bucket: \"test\")\n            |> range(start: -50m)\n            |> filter(fn: (r) =>\n              r._measurement == \"mqtt_consumer\" and\n              (\n                r._field == \"temperature\" or\n                r._field == \"humidity\" or\n                r._field == \"locations_user_latitude\" or\n                r._field == \"locations_user_longitude\"\n              ) and\n              exists r._value\n            )\n            |> last()\n          `;\n      const sensors = {}; // Object to store sensor data\n\n      const fetchSensorLocationData = queryApi.queryRows(sensorLocationQuery, {\n        next: (row, tableMeta) => {\n          const sensorData = tableMeta.toObject(row);\n          const {\n            _field,\n            _value,\n            topic\n          } = sensorData;\n\n          // Extract the sensor ID from the topic. It's the 4th part of the topic\n          const sensorId = topic.split(\"/\")[3];\n          if (_field === \"locations_user_latitude\") {\n            sensors[sensorId] = {\n              ...sensors[sensorId],\n              latitude: _value,\n              sensorId\n            };\n          } else if (_field === \"locations_user_longitude\") {\n            sensors[sensorId] = {\n              ...sensors[sensorId],\n              longitude: _value,\n              sensorId\n            };\n          }\n        },\n        error: error => {\n          console.error(error);\n          console.log(\"\\nFinished ERROR\");\n          reject(error);\n        },\n        complete: () => {\n          console.log(\"\\nFinished SUCCESS\");\n          // Set the sensor data in the state\n          const sensorArray = Object.values(sensors);\n          this.setState({\n            sensors: sensorArray\n          });\n          resolve();\n        }\n      });\n    });\n  }\n  showClickedCoordinates(latLng) {\n    const {\n      lat,\n      lng\n    } = latLng.toJSON();\n    console.log(`Clicked coordinates: Latitude: ${lat}, Longitude: ${lng}`);\n  }\n  isPointInsideRectangle(point, rectangleBounds) {\n    var [north, east, south, west] = rectangleBounds;\n    return point.longitude >= west && point.longitude <= east && point.latitude >= south && point.latitude <= north;\n  }\n  isPointInsidePolygon(point, coordinates) {\n    var inside = false;\n    var [x, y] = [point.latitude, point.longitude];\n    for (var i = 0, j = coordinates.length - 1; i < coordinates.length; j = i++) {\n      var xi = coordinates[i].lat;\n      var yi = coordinates[i].lng;\n      var xj = coordinates[j].lat;\n      var yj = coordinates[j].lng;\n      var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return inside;\n  }\n  getFieldsByManager(id) {\n    return axios.get(URL + \"getfieldsbymanager/\" + id + \"/\").then(res => {\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  getFields(id) {\n    return axios.get(URL + \"getfieldsbyid/\" + id + \"/\").then(res => {\n      return res.data;\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  initDrawing(map) {\n    // allow drawing on map\n    const drawingManager = new window.google.maps.drawing.DrawingManager({\n      // add drawing options here\n      drawingControlOptions: {\n        drawingModes: [window.google.maps.drawing.OverlayType.POLYGON, window.google.maps.drawing.OverlayType.RECTANGLE],\n        // add labels to drawing options\n        position: window.google.maps.ControlPosition.TOP_CENTER\n      },\n      polygonOptions: {\n        editable: true,\n        clickable: true,\n        strokeColor: \"#0ba837\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#0ba837\",\n        fillOpacity: 0.35\n      },\n      rectangleOptions: {\n        editable: true,\n        clickable: true,\n        strokeColor: \"#0ba837\",\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: \"#0ba837\",\n        fillOpacity: 0.35\n      }\n    });\n    drawingManager.setDrawingMode(null);\n    drawingManager.setOptions({\n      drawingControl: false\n    });\n    const addFieldButton = document.getElementById(\"addNewField\");\n    addFieldButton.addEventListener(\"click\", () => {\n      if (drawingManager.drawingControl === false) {\n        // If drawing mode is off, turn it on for polygons and rectangles\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        // delete the rectangle being drawn\n        drawingManager.setDrawingMode(null);\n      } else {\n        // If drawing mode is on, turn it off\n        drawingManager.setDrawingMode(null);\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n      }\n    });\n    window.google.maps.event.addListener(drawingManager, 'polygoncomplete', polygon => {\n      document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\n        popup.remove();\n        if (!polygon.isComplete) {\n          polygon.setMap(null);\n        }\n        if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\n          drawingManager.setOptions({\n            drawingControl: false\n          });\n        }\n      });\n      drawingManager.setOptions({\n        drawingControl: false\n      });\n      drawingManager.setDrawingMode(null);\n\n      //hide a label\n      document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\n      const popup = document.createElement('div');\n      popup.classList.add('popup');\n      const message = document.createElement('p');\n      message.textContent = 'Do you want to add this polygon?';\n      const acceptButton = document.createElement('button');\n      acceptButton.textContent = 'Add';\n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      acceptButton.addEventListener('click', () => {\n        let cancelFormSubmitPromise = false;\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n        drawingManager.setDrawingMode(null);\n        polygon.setEditable(false);\n        popup.remove();\n        document.getElementById(\"createField\").classList.remove(\"hidden\");\n        const area = window.google.maps.geometry.spherical.computeArea(polygon.getPath()).toFixed(0);\n        console.log('Polygon Area:', area);\n        const formSubmitPromise = new Promise((resolve, reject) => {\n          document.getElementById(\"createField\").addEventListener(\"submit\", event => {\n            event.preventDefault();\n            if (!cancelFormSubmitPromise) {\n              resolve(); // resolve the promise when the form is submitted\n            } else {\n              reject();\n            }\n          });\n        });\n        document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\n          cancelFormSubmitPromise = true;\n        });\n        formSubmitPromise.then(() => {\n          const paths = polygon.getPaths();\n          var vertices = [];\n          for (var i = 0; i < paths.getLength(); i++) {\n            var path = paths.getAt(i);\n            for (var j = 0; j < path.getLength(); j++) {\n              var vertex = path.getAt(j);\n              vertices.push({\n                lat: vertex.lat(),\n                lng: vertex.lng()\n              });\n            }\n          }\n\n          // convert the vertices to a string\n          const coordinates = vertices.map(vertex => {\n            return vertex.lat + \",\" + vertex.lng;\n          }).join(\";\");\n\n          // get the form data\n          const fieldName = document.getElementById(\"fieldName\").value;\n          const cropType = document.getElementById(\"cropType\").value;\n\n          // call the backend to add the coordinates\n          axios.post(URL + 'createfield/', {\n            name: fieldName,\n            crop_type: cropType,\n            type: \"polygon\",\n            coordinates: coordinates,\n            area: area,\n            farm: this.props.farmDetails.id\n          }).then(res => {\n            var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\n            var row = table.insertRow(0);\n            var cell1 = row.insertCell(0);\n            var cell2 = row.insertCell(1);\n            var cell3 = row.insertCell(2);\n            cell1.innerHTML = \"<span>\" + fieldName + \"</span>\";\n            cell2.innerHTML = \"<span>\" + area + \"</span>\";\n            cell3.innerHTML = \"<span>\" + cropType + \"</span>\";\n            polygon.isComplete = true;\n            const bounds = new window.google.maps.LatLngBounds();\n            const polygonPath = polygon.getPath();\n            polygonPath.forEach(latLng => {\n              bounds.extend(latLng);\n            });\n            const polygonCenter = bounds.getCenter();\n            row.addEventListener(\"click\", () => {\n              map.setCenter(polygonCenter);\n              map.setZoom(15);\n            });\n          }).catch(err => {\n            console.log(err);\n            polygon.setMap(null);\n          });\n          polygon.addListener(\"mouseover\", () => {\n            this.highlightRow(fieldName);\n          });\n          polygon.addListener(\"mouseout\", () => {\n            this.unhighlightRow(fieldName);\n          });\n          document.getElementById(\"fieldName\").value = \"\";\n          document.getElementById(\"cropType\").value = \"\";\n        });\n      });\n      cancelButton.addEventListener('click', () => {\n        document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\n        polygon.setMap(null);\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        popup.remove();\n      });\n      popup.appendChild(message);\n      popup.appendChild(acceptButton);\n      popup.appendChild(cancelButton);\n\n      // show the popup on the div, but outside the map\n      document.getElementById(\"add\").appendChild(popup);\n    });\n    // add event listener to drawing manager rectangle\n    window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', rectangle => {\n      document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\n        popup.remove();\n        if (!rectangle.isComplete) {\n          rectangle.setMap(null);\n        }\n        if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\n          drawingManager.setOptions({\n            drawingControl: false\n          });\n        }\n      });\n      drawingManager.setOptions({\n        drawingControl: false\n      });\n      drawingManager.setDrawingMode(null);\n\n      //hide a label\n      document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\n      const popup = document.createElement('div');\n      popup.classList.add('popup');\n      const message = document.createElement('p');\n      message.textContent = 'Do you want to add this rectangle?';\n      const acceptButton = document.createElement('button');\n      acceptButton.textContent = 'Add';\n      const cancelButton = document.createElement('button');\n      cancelButton.textContent = 'Cancel';\n      acceptButton.addEventListener('click', () => {\n        let cancelFormSubmitPromise = false;\n        drawingManager.setOptions({\n          drawingControl: false\n        });\n        drawingManager.setDrawingMode(null);\n        rectangle.setEditable(false);\n        popup.remove();\n        document.getElementById(\"createField\").classList.remove(\"hidden\");\n\n        // get the area of the rectangle\n        const area = window.google.maps.geometry.spherical.computeArea(rectangle.getBounds()).toFixed(0);\n        console.log('Rectangle Area:', area);\n        const formSubmitPromise = new Promise((resolve, reject) => {\n          document.getElementById(\"createField\").addEventListener(\"submit\", event => {\n            event.preventDefault();\n            if (!cancelFormSubmitPromise) {\n              resolve(); // resolve the promise when the form is submitted\n            } else {\n              reject();\n            }\n          });\n        });\n        document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\n          cancelFormSubmitPromise = true;\n        });\n        formSubmitPromise.then(() => {\n          const bounds = rectangle.getBounds();\n          const coordinates = {\n            north: bounds.getNorthEast().lat(),\n            east: bounds.getNorthEast().lng(),\n            south: bounds.getSouthWest().lat(),\n            west: bounds.getSouthWest().lng()\n          };\n          const lat = (parseFloat(coordinates.north) + parseFloat(coordinates.south)) / 2;\n          const lng = (parseFloat(coordinates.east) + parseFloat(coordinates.west)) / 2;\n\n          /*const marker = new window.google.maps.Marker({\r\n              position: { lat: lat, lng: lng },\r\n              map: map,\r\n              label: {\r\n                  text: document.getElementById(\"fieldName\").value,\r\n                  color: \"#ffffff\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"10px\",\r\n              },\r\n              icon: {\r\n                  path: window.google.maps.SymbolPath.CIRCLE,\r\n                  scale: 0,\r\n              },\r\n            });*/\n\n          // convert coordinates string with ; to array\n          const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\n\n          // get the form data\n          const fieldName = document.getElementById(\"fieldName\").value;\n          const cropType = document.getElementById(\"cropType\").value;\n\n          // call the backend to add the coordinates\n          axios.post(URL + 'createfield/', {\n            name: fieldName,\n            crop_type: cropType,\n            type: \"rectangle\",\n            coordinates: coordinatesString,\n            area: area,\n            farm: this.props.farmDetails.id\n          }).then(res => {\n            var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\n            var row = table.insertRow(0);\n            var cell1 = row.insertCell(0);\n            var cell2 = row.insertCell(1);\n            var cell3 = row.insertCell(2);\n            cell1.innerHTML = \"<span>\" + fieldName + \"</span>\";\n            cell2.innerHTML = \"<span>\" + area + \"</span> m2\";\n            cell3.innerHTML = \"<span>\" + cropType + \"</span>\";\n            rectangle.isComplete = true;\n            row.addEventListener(\"click\", () => {\n              map.setCenter({\n                lat: lat,\n                lng: lng\n              });\n              map.setZoom(15);\n            });\n          }).catch(err => {\n            console.log(err);\n            rectangle.setMap(null);\n          });\n          rectangle.addListener(\"mouseover\", () => {\n            this.highlightRow(fieldName);\n          });\n          rectangle.addListener(\"mouseout\", () => {\n            this.unhighlightRow(fieldName);\n          });\n          document.getElementById(\"fieldName\").value = \"\";\n          document.getElementById(\"cropType\").value = \"\";\n        });\n      });\n      cancelButton.addEventListener('click', () => {\n        document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\n        rectangle.setMap(null);\n        drawingManager.setOptions({\n          drawingControl: true\n        });\n        popup.remove();\n      });\n      popup.appendChild(message);\n      popup.appendChild(acceptButton);\n      popup.appendChild(cancelButton);\n\n      // show the popup on the div, but outside the map\n      document.getElementById(\"add\").appendChild(popup);\n    });\n    drawingManager.setMap(map);\n  }\n  createField(event) {\n    event.preventDefault();\n    document.getElementById(\"createField\").classList.add(\"hidden\");\n    document.getElementById(\"fieldTable\").classList.remove(\"hidden\");\n    document.getElementById(\"cancelNewField\").classList.add(\"hidden\");\n    document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\n  }\n\n  /*cancel() {\r\n      document.getElementById(\"createField\").classList.add(\"hidden\");\r\n  }*/\n\n  showFieldForm() {\n    document.getElementById(\"fieldTable\").classList.toggle(\"hidden\");\n\n    // check if table is hidden\n    if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\n      document.getElementById('cancelNewField').classList.remove('hidden');\n      document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\n    } else {\n      document.getElementById('cancelNewField').classList.add('hidden');\n      document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\n      document.getElementById(\"createField\").classList.add(\"hidden\");\n    }\n  }\n  showData(sensorData) {\n    // set modal open to true and send the sensor data to the modal\n    this.setState({\n      modalOpen: true,\n      sensorData: sensorData\n    });\n  }\n  highlightRow(fieldName) {\n    const table = document.getElementById(\"fieldTable\"); // Replace \"your-table-id\" with the actual ID of your table\n    const rows = table.getElementsByTagName(\"tr\");\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const firstColumnValue = row.cells[0].textContent.trim();\n      if (firstColumnValue === fieldName) {\n        row.style.backgroundColor = \"#D0FFBC\"; //\n        // change the color of the background of the row\n      }\n    }\n  }\n\n  unhighlightRow(fieldName) {\n    const table = document.getElementById(\"fieldTable\");\n    const rows = table.getElementsByTagName(\"tr\");\n    for (let i = 0; i < rows.length; i++) {\n      const row = rows[i];\n      const firstColumnValue = row.cells[0].textContent.trim();\n      if (firstColumnValue === fieldName) {\n        row.style.backgroundColor = \"\";\n      }\n    }\n  }\n  render() {\n    const {\n      modalOpen\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.centreToMap,\n        id: \"centreToMap\",\n        className: `fieldsTableBtn ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-location-crosshairs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 913,\n          columnNumber: 163\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        children: modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n          setOpenModal: isOpen => this.setState({\n            modalOpen: isOpen\n          }),\n          sensorData: this.state.sensorData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 914,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fieldsTableConatiner\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"hidden\",\n          id: \"addFieldsHeader\",\n          children: \"Use the rectangle/polygon tool to draw the field onto map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 923,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.showFieldForm,\n          id: \"cancelNewField\",\n          className: `fieldsTableBtn hidden ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            class: \"fa-solid fa-xmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 180\n          }, this), \" Cancel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"createField\",\n          className: \"hidden\",\n          onSubmit: this.createField,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Field Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"name\",\n            id: \"fieldName\",\n            placeholder: \"enter name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Crop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            name: \"crop_type\",\n            id: \"cropType\",\n            placeholder: \"select type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"loginInBtn\",\n            type: \"submit\",\n            value: \"Create Field\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"fieldTable\",\n          className: `fieldsTable ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Field\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 939,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 939,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Land Area\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 940,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: \"Crop\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 941,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 941,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 938,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 937,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colspan: \"4\",\n                children: this.props.user.role === 'farmer' || this.props.user.role === 'field manager' ? null : /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: this.showFieldForm,\n                  id: \"addNewField\",\n                  className: `fieldsTableBtn`,\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"fa-solid fa-plus\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 949,\n                    columnNumber: 126\n                  }, this), \" Add Field\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 947,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 946,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 944,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 936,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default Maps;","map":{"version":3,"names":["React","axios","useState","Modal","InfluxDB","point","jsxDEV","_jsxDEV","Fragment","_Fragment","URL","process","env","REACT_APP_URL","Maps","Component","constructor","props","state","modalOpen","sensor_latitude","sensor_longitude","componentDidMount","sensorLocationQuery","fields","role","user","getFieldsByManager","id","getFields","farmDetails","map","window","google","maps","Map","document","getElementById","mapTypeId","center","lat","latitude","lng","longitude","zoom","streetViewControl","mapTypeControl","addListener","event","showClickedCoordinates","latLng","marker","Marker","position","label","fontFamily","text","color","table","getElementsByTagName","centreMap","addEventListener","setCenter","getPosition","setZoom","length","forEach","field","row","insertRow","cell1","insertCell","innerHTML","name","cell2","area","cell3","crop_type","cell4","type","coordinates","split","rectangleBounds","parseFloat","console","log","rectangle","Rectangle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","bounds","north","south","east","west","isComplete","sensors","sensor","isPointInsideRectangle","icon","path","SymbolPath","CIRCLE","scale","clickable","showData","highlightRow","unhighlightRow","coordinatesArray","coordinate","push","polygon","Polygon","paths","coord","polygonCoordinates","isPointInsidePolygon","LatLngBounds","polygonPath","getPath","extend","polygonCenter","getCenter","initDrawing","Promise","resolve","reject","influxDB","url","token","queryApi","getQueryApi","fetchSensorLocationData","queryRows","next","tableMeta","sensorData","toObject","_field","_value","topic","sensorId","error","complete","sensorArray","Object","values","setState","toJSON","inside","x","y","i","j","xi","yi","xj","yj","intersect","get","then","res","data","catch","err","drawingManager","drawing","DrawingManager","drawingControlOptions","drawingModes","OverlayType","POLYGON","RECTANGLE","ControlPosition","TOP_CENTER","polygonOptions","editable","rectangleOptions","setDrawingMode","setOptions","drawingControl","addFieldButton","popup","remove","setMap","classList","contains","add","createElement","message","textContent","acceptButton","cancelButton","cancelFormSubmitPromise","setEditable","geometry","spherical","computeArea","toFixed","formSubmitPromise","preventDefault","getPaths","vertices","getLength","getAt","vertex","join","fieldName","value","cropType","post","farm","appendChild","getBounds","getNorthEast","getSouthWest","coordinatesString","createField","showFieldForm","toggle","rows","firstColumnValue","cells","trim","style","backgroundColor","render","children","onClick","centreToMap","className","localStorage","getItem","fileName","_jsxFileName","lineNumber","columnNumber","setOpenModal","isOpen","class","onSubmit","htmlFor","required","placeholder","colspan"],"sources":["/Users/ewanallison/Desktop/FarmIT/github/Untitled/frontend/src/components/Dashboard/Utilities/Maps.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\r\nimport { point } from \"leaflet\";\r\n\r\n\r\n\r\nconst URL = process.env.REACT_APP_URL;\r\n\r\n\r\nclass Maps extends React.Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modalOpen: false,\r\n            sensor_latitude: null,\r\n            sensor_longitude: null,\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        await this.sensorLocationQuery();\r\n\r\n        // check if any field already exists\r\n        var fields;\r\n        const role = this.props.user.role;\r\n\r\n        if (role === \"field manager\") {\r\n            fields = await this.getFieldsByManager(this.props.user.id);\r\n        } else {\r\n            fields = await this.getFields(this.props.farmDetails.id);\r\n        }\r\n\r\n\r\n        const map = new window.google.maps.Map(document.getElementById(\"map\"), {\r\n\r\n            mapTypeId: \"satellite\",\r\n            center: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            zoom: 15,\r\n            streetViewControl: false,\r\n            mapTypeControl: false,\r\n        });\r\n\r\n        map.addListener(\"click\", (event) => {\r\n            this.showClickedCoordinates(event.latLng);\r\n          });\r\n\r\n\r\n        const marker = new window.google.maps.Marker({\r\n            position: { lat: this.props.farmDetails.latitude, lng: this.props.farmDetails.longitude },\r\n            map: map,\r\n            label: {\r\n                fontFamily: 'Fontawesome',\r\n                text: '\\uf015',\r\n                color: 'white',\r\n\r\n            },\r\n\r\n        });\r\n\r\n        var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\r\n        var centreMap = document.getElementById(\"centreToMap\");\r\n\r\n        centreMap.addEventListener(\"click\", () => {\r\n            map.setCenter(marker.getPosition());\r\n            map.setZoom(15);\r\n        });\r\n\r\n        if (fields.length > 0) {\r\n\r\n            fields.forEach((field) => {\r\n\r\n                var row = table.insertRow(0);\r\n\r\n                var cell1 = row.insertCell(0);\r\n                cell1.innerHTML = \"<span>\" + field.name + \"</span>\";\r\n\r\n                var cell2 = row.insertCell(1);\r\n                cell2.innerHTML = \"<span>\" + field.area + \" m<sup>2 </span>\";\r\n\r\n                var cell3 = row.insertCell(2);\r\n                cell3.innerHTML = \"<span>\" + field.crop_type + \"</span>\";\r\n\r\n                var cell4 = row.insertCell(3);\r\n                cell4.innerHTML = '<i class=\"fa-solid fa-ellipsis-vertical\"></i>';\r\n\r\n\r\n                if (field.type === \"rectangle\") {\r\n\r\n                    const coordinates = field.coordinates.split(\";\");\r\n\r\n                    const rectangleBounds = coordinates.map(parseFloat);\r\n                    console.log(rectangleBounds);\r\n\r\n\r\n                    const rectangle = new window.google.maps.Rectangle({\r\n                        strokeColor: \"#0ba837\",\r\n                        strokeOpacity: 0.8,\r\n                        strokeWeight: 2,\r\n                        fillColor: \"#0ba837\",\r\n                        fillOpacity: 0.35,\r\n                        map,\r\n                        bounds: {\r\n                            north: parseFloat(coordinates[0]),\r\n                            south: parseFloat(coordinates[2]),\r\n                            east: parseFloat(coordinates[1]),\r\n                            west: parseFloat(coordinates[3]),\r\n                        },\r\n                        isComplete: false,\r\n                    });\r\n\r\n                    this.state.sensors.forEach((sensor) => {\r\n\r\n                        // check if the sensor is inside the rectangle\r\n                        if (this.isPointInsideRectangle(sensor, rectangleBounds)) {\r\n\r\n\r\n                            // add a little point in the rectangle in the point position\r\n                            const marker = new window.google.maps.Marker({\r\n                                position: { lat: sensor.latitude, lng: sensor.longitude },\r\n                                map: map,\r\n                                // make a dot\r\n                                icon: {\r\n                                    path: window.google.maps.SymbolPath.CIRCLE, //ADD COOL SENSOR HERE\r\n                                    scale: 5,\r\n                                    fillColor: \"#000000\",\r\n                                    fillOpacity: 1,\r\n                                    strokeWeight: 0,\r\n                                    clickable: true,\r\n                                    // add a label to the dot\r\n                                },\r\n                            });\r\n\r\n                            // on click, open the modal\r\n                            marker.addListener(\"click\", () => {\r\n                                this.showData(sensor);\r\n                            });\r\n                        }\r\n                    });\r\n\r\n\r\n\r\n                    rectangle.addListener(\"mouseover\", () => {\r\n                        this.highlightRow(field.name);\r\n                    });\r\n\r\n                    rectangle.addListener(\"mouseout\", () => {\r\n                        this.unhighlightRow(field.name);\r\n                    });\r\n\r\n                    rectangle.addListener(\"click\", (event) => {\r\n                        this.showClickedCoordinates(event.latLng);\r\n                    });\r\n\r\n                    const lat = (parseFloat(coordinates[0]) + parseFloat(coordinates[2])) / 2;\r\n                    const lng = (parseFloat(coordinates[1]) + parseFloat(coordinates[3])) / 2;\r\n\r\n                    /*const marker = new window.google.maps.Marker({\r\n                        position: { lat: lat, lng: lng },\r\n                        map: map,\r\n                        label: {\r\n                            text: field.name,\r\n                            color: \"#ffffff\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"10px\",\r\n                        },\r\n                        icon: {\r\n                            path: window.google.maps.SymbolPath.CIRCLE,\r\n                            scale: 0,\r\n                        },\r\n\r\n                    });*/\r\n\r\n\r\n                    row.addEventListener(\"click\", () => {\r\n                        map.setCenter({ lat: lat, lng: lng });\r\n                        map.setZoom(15);\r\n                    });\r\n\r\n\r\n                } else {\r\n\r\n                    // separate the coordinates by ;\r\n                    const coordinates = field.coordinates.split(\";\");\r\n\r\n                    // split each coordinate by ,\r\n                    const coordinatesArray = coordinates.map((coordinate) => {\r\n                        return coordinate.split(\",\");\r\n                    });\r\n\r\n                    // add each coordinate to the path\r\n                    const path = [];\r\n                    coordinatesArray.forEach((coordinate) => {\r\n                        path.push({ lat: parseFloat(coordinate[0]), lng: parseFloat(coordinate[1]) });\r\n                    });\r\n\r\n                    // create polygon\r\n                    const polygon = new window.google.maps.Polygon({\r\n                        paths: coordinates.map((coord) => {\r\n                            const [lat, lng] = coord.split(\",\");\r\n                            return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n                        }),\r\n                        strokeColor: \"#0ba837\",\r\n                        strokeOpacity: 0.8,\r\n                        strokeWeight: 2,\r\n                        fillColor: \"#0ba837\",\r\n                        fillOpacity: 0.35,\r\n                        map,\r\n                        path: path,\r\n                        isComplete: false,\r\n                    });\r\n\r\n                    const polygonCoordinates = coordinates.map((coord) => {\r\n                        const [lat, lng] = coord.split(\",\");\r\n                        return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n                    });\r\n\r\n                    console.log(\"Polygon Coordinates:\", polygonCoordinates);\r\n\r\n                    this.state.sensors.forEach((sensor) => {\r\n                        // check if the sensor is inside the rectangle\r\n                        if (this.isPointInsidePolygon(sensor, polygonCoordinates)) {\r\n\r\n                            console.log(\"Sensor inside polygon\");\r\n\r\n\r\n                            // add a little point in the rectangle in the point position\r\n                            const marker = new window.google.maps.Marker({\r\n                                position: { lat: sensor.latitude, lng: sensor.longitude },\r\n                                map: map,\r\n                                // make a dot\r\n                                icon: {\r\n                                    path: window.google.maps.SymbolPath.CIRCLE,\r\n                                    scale: 5,\r\n                                    fillColor: \"#000000\",\r\n                                    fillOpacity: 1,\r\n                                    strokeWeight: 0,\r\n                                    clickable: true,\r\n                                },\r\n                            });\r\n\r\n                            // on click, open the modal\r\n                            marker.addListener(\"click\", () => {\r\n                                this.showData(sensor);\r\n                            });\r\n                        }\r\n                    });\r\n\r\n\r\n                    polygon.addListener(\"mouseover\", () => {\r\n                        this.highlightRow(field.name);\r\n                    });\r\n\r\n                    polygon.addListener(\"mouseout\", () => {\r\n                        this.unhighlightRow(field.name);\r\n                    });\r\n\r\n                    polygon.addListener(\"click\", (event) => {\r\n                        this.showClickedCoordinates(event.latLng);\r\n                    });\r\n\r\n\r\n                    const bounds = new window.google.maps.LatLngBounds();\r\n                    const polygonPath = polygon.getPath();\r\n\r\n                    polygonPath.forEach((latLng) => {\r\n                        bounds.extend(latLng);\r\n                    });\r\n\r\n                    const polygonCenter = bounds.getCenter();\r\n\r\n                    row.addEventListener(\"click\", () => {\r\n                        map.setCenter(polygonCenter);\r\n                        map.setZoom(15);\r\n                    });\r\n                }\r\n\r\n            });\r\n        }\r\n        this.initDrawing(map);\r\n    }\r\n\r\n    sensorLocationQuery() {\r\n        return new Promise((resolve, reject) => {\r\n            const influxDB = new InfluxDB({\r\n                url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\r\n                token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\",\r\n            });\r\n\r\n            const queryApi = influxDB.getQueryApi(\"FarmIT\");\r\n\r\n            const sensorLocationQuery = `\r\n            from(bucket: \"test\")\r\n            |> range(start: -50m)\r\n            |> filter(fn: (r) =>\r\n              r._measurement == \"mqtt_consumer\" and\r\n              (\r\n                r._field == \"temperature\" or\r\n                r._field == \"humidity\" or\r\n                r._field == \"locations_user_latitude\" or\r\n                r._field == \"locations_user_longitude\"\r\n              ) and\r\n              exists r._value\r\n            )\r\n            |> last()\r\n          `;\r\n\r\n            const sensors = {}; // Object to store sensor data\r\n\r\n            const fetchSensorLocationData = queryApi.queryRows(sensorLocationQuery, {\r\n                next: (row, tableMeta) => {\r\n                    const sensorData = tableMeta.toObject(row);\r\n\r\n                    const { _field, _value, topic } = sensorData;\r\n\r\n                    // Extract the sensor ID from the topic. It's the 4th part of the topic\r\n                    const sensorId = topic.split(\"/\")[3];\r\n\r\n                    if (_field === \"locations_user_latitude\") {\r\n                        sensors[sensorId] = { ...sensors[sensorId], latitude: _value, sensorId };\r\n                    } else if (_field === \"locations_user_longitude\") {\r\n                        sensors[sensorId] = { ...sensors[sensorId], longitude: _value, sensorId };\r\n                    }\r\n                },\r\n                error: (error) => {\r\n                    console.error(error);\r\n                    console.log(\"\\nFinished ERROR\");\r\n                    reject(error);\r\n                },\r\n                complete: () => {\r\n                    console.log(\"\\nFinished SUCCESS\");\r\n                    // Set the sensor data in the state\r\n                    const sensorArray = Object.values(sensors);\r\n                    this.setState({ sensors: sensorArray });\r\n                    resolve();\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    showClickedCoordinates(latLng) {\r\n        const { lat, lng } = latLng.toJSON();\r\n        console.log(`Clicked coordinates: Latitude: ${lat}, Longitude: ${lng}`);\r\n      }\r\n\r\n\r\n\r\n\r\n    isPointInsideRectangle(point, rectangleBounds) {\r\n        var [north, east, south, west] = rectangleBounds;\r\n\r\n        return (\r\n            point.longitude >= west &&\r\n            point.longitude <= east &&\r\n            point.latitude >= south &&\r\n            point.latitude <= north\r\n        );\r\n    }\r\n\r\n    isPointInsidePolygon(point, coordinates) {\r\n\r\n        var inside = false;\r\n        var [x, y] = [point.latitude, point.longitude];\r\n\r\n        for (var i = 0, j = coordinates.length - 1; i < coordinates.length; j = i++) {\r\n            var xi = coordinates[i].lat;\r\n            var yi = coordinates[i].lng;\r\n            var xj = coordinates[j].lat;\r\n            var yj = coordinates[j].lng;\r\n\r\n            var intersect =\r\n                yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n\r\n            if (intersect) {\r\n                inside = !inside;\r\n            }\r\n        }\r\n\r\n        return inside;\r\n    }\r\n\r\n    getFieldsByManager(id) {\r\n        return axios\r\n            .get(URL + \"getfieldsbymanager/\" + id + \"/\")\r\n            .then((res) => {\r\n                return res.data;\r\n            }\r\n            )\r\n            .catch((err) => {\r\n                console.log(err);\r\n            }\r\n            );\r\n    }\r\n\r\n    getFields(id) {\r\n        return axios\r\n            .get(URL + \"getfieldsbyid/\" + id + \"/\")\r\n            .then((res) => {\r\n                return res.data;\r\n            }\r\n            )\r\n            .catch((err) => {\r\n                console.log(err);\r\n            }\r\n            );\r\n    }\r\n\r\n    initDrawing(map) {\r\n\r\n        // allow drawing on map\r\n        const drawingManager = new window.google.maps.drawing.DrawingManager({\r\n            // add drawing options here\r\n            drawingControlOptions: {\r\n                drawingModes: [\r\n                    window.google.maps.drawing.OverlayType.POLYGON,\r\n                    window.google.maps.drawing.OverlayType.RECTANGLE,\r\n                ],\r\n                // add labels to drawing options\r\n                position: window.google.maps.ControlPosition.TOP_CENTER,\r\n            },\r\n            polygonOptions: {\r\n                editable: true,\r\n                clickable: true,\r\n                strokeColor: \"#0ba837\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: \"#0ba837\",\r\n                fillOpacity: 0.35,\r\n            },\r\n\r\n            rectangleOptions: {\r\n                editable: true,\r\n                clickable: true,\r\n                strokeColor: \"#0ba837\",\r\n                strokeOpacity: 0.8,\r\n                strokeWeight: 2,\r\n                fillColor: \"#0ba837\",\r\n                fillOpacity: 0.35,\r\n            }\r\n        });\r\n       \r\n        drawingManager.setDrawingMode(null);\r\n\r\n        drawingManager.setOptions({\r\n            drawingControl: false,\r\n        });\r\n\r\n        const addFieldButton = document.getElementById(\"addNewField\");\r\n        addFieldButton.addEventListener(\"click\", () => {\r\n            if (drawingManager.drawingControl === false) {\r\n                // If drawing mode is off, turn it on for polygons and rectangles\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                // delete the rectangle being drawn\r\n                drawingManager.setDrawingMode(null);\r\n            } else {\r\n                // If drawing mode is on, turn it off\r\n                drawingManager.setDrawingMode(null);\r\n                drawingManager.setOptions({ drawingControl: false });\r\n            }\r\n        });\r\n\r\n\r\n        window.google.maps.event.addListener(drawingManager, 'polygoncomplete', (polygon) => {\r\n\r\n            document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\r\n\r\n                popup.remove();\r\n\r\n                if (!polygon.isComplete) {\r\n                    polygon.setMap(null);\r\n                }\r\n\r\n                if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\r\n                    drawingManager.setOptions({\r\n                        drawingControl: false,\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            drawingManager.setOptions({\r\n                drawingControl: false,\r\n            });\r\n\r\n            drawingManager.setDrawingMode(null);\r\n\r\n            //hide a label\r\n            document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\r\n\r\n            const popup = document.createElement('div');\r\n            popup.classList.add('popup');\r\n\r\n            const message = document.createElement('p');\r\n            message.textContent = 'Do you want to add this polygon?';\r\n\r\n            const acceptButton = document.createElement('button');\r\n            acceptButton.textContent = 'Add';\r\n\r\n            const cancelButton = document.createElement('button');\r\n            cancelButton.textContent = 'Cancel';\r\n\r\n\r\n            acceptButton.addEventListener('click', () => {\r\n\r\n                let cancelFormSubmitPromise = false;\r\n\r\n                drawingManager.setOptions({\r\n                    drawingControl: false,\r\n                });\r\n\r\n                drawingManager.setDrawingMode(null);\r\n\r\n                polygon.setEditable(false);\r\n\r\n                popup.remove();\r\n                document.getElementById(\"createField\").classList.remove(\"hidden\");\r\n\r\n                const area = window.google.maps.geometry.spherical.computeArea(polygon.getPath()).toFixed(0);\r\n\r\n                console.log('Polygon Area:', area);\r\n\r\n                const formSubmitPromise = new Promise((resolve, reject) => {\r\n                    document.getElementById(\"createField\").addEventListener(\"submit\", (event) => {\r\n                        event.preventDefault();\r\n                        if (!cancelFormSubmitPromise) {\r\n                            resolve(); // resolve the promise when the form is submitted\r\n                        } else {\r\n                            reject();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\r\n                    cancelFormSubmitPromise = true;\r\n                });\r\n\r\n\r\n\r\n                formSubmitPromise.then(() => {\r\n\r\n\r\n                    const paths = polygon.getPaths();\r\n                    var vertices = [];\r\n\r\n                    for (var i = 0; i < paths.getLength(); i++) {\r\n                        var path = paths.getAt(i);\r\n\r\n                        for (var j = 0; j < path.getLength(); j++) {\r\n                            var vertex = path.getAt(j);\r\n                            vertices.push({ lat: vertex.lat(), lng: vertex.lng() });\r\n                        }\r\n                    }\r\n\r\n\r\n                    // convert the vertices to a string\r\n                    const coordinates = vertices.map((vertex) => {\r\n                        return vertex.lat + \",\" + vertex.lng;\r\n                    }).join(\";\");\r\n\r\n\r\n                    // get the form data\r\n                    const fieldName = document.getElementById(\"fieldName\").value;\r\n                    const cropType = document.getElementById(\"cropType\").value;\r\n\r\n                    // call the backend to add the coordinates\r\n                    axios.post(URL + 'createfield/', {\r\n                        name: fieldName,\r\n                        crop_type: cropType,\r\n                        type: \"polygon\",\r\n                        coordinates: coordinates,\r\n                        area: area,\r\n                        farm: this.props.farmDetails.id,\r\n                    }).then((res) => {\r\n                        var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\r\n\r\n                        var row = table.insertRow(0);\r\n\r\n                        var cell1 = row.insertCell(0);\r\n                        var cell2 = row.insertCell(1);\r\n                        var cell3 = row.insertCell(2);\r\n\r\n\r\n                        cell1.innerHTML = \"<span>\" + fieldName + \"</span>\";\r\n                        cell2.innerHTML = \"<span>\" + area + \"</span>\";\r\n                        cell3.innerHTML = \"<span>\" + cropType + \"</span>\";\r\n\r\n                        polygon.isComplete = true;\r\n\r\n\r\n                        const bounds = new window.google.maps.LatLngBounds();\r\n                        const polygonPath = polygon.getPath();\r\n\r\n                        polygonPath.forEach((latLng) => {\r\n                            bounds.extend(latLng);\r\n                        });\r\n\r\n                        const polygonCenter = bounds.getCenter();\r\n\r\n                        row.addEventListener(\"click\", () => {\r\n                            map.setCenter(polygonCenter);\r\n                            map.setZoom(15);\r\n                        });\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                        polygon.setMap(null);\r\n                    });\r\n\r\n                    polygon.addListener(\"mouseover\", () => {\r\n                        this.highlightRow(fieldName);\r\n                    });\r\n\r\n                    polygon.addListener(\"mouseout\", () => {\r\n                        this.unhighlightRow(fieldName);\r\n                    });\r\n\r\n                    document.getElementById(\"fieldName\").value = \"\";\r\n                    document.getElementById(\"cropType\").value = \"\";\r\n                });\r\n            });\r\n\r\n\r\n\r\n            cancelButton.addEventListener('click', () => {\r\n                document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\r\n                polygon.setMap(null);\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                popup.remove();\r\n            });\r\n\r\n            popup.appendChild(message);\r\n            popup.appendChild(acceptButton);\r\n            popup.appendChild(cancelButton);\r\n\r\n            // show the popup on the div, but outside the map\r\n            document.getElementById(\"add\").appendChild(popup);\r\n\r\n\r\n        });\r\n        // add event listener to drawing manager rectangle\r\n        window.google.maps.event.addListener(drawingManager, 'rectanglecomplete', (rectangle) => {\r\n\r\n            document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\r\n\r\n                popup.remove();\r\n\r\n                if (!rectangle.isComplete) {\r\n                    rectangle.setMap(null);\r\n                }\r\n\r\n                if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\r\n                    drawingManager.setOptions({\r\n                        drawingControl: false,\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            drawingManager.setOptions({\r\n                drawingControl: false,\r\n            });\r\n\r\n            drawingManager.setDrawingMode(null);\r\n\r\n            //hide a label\r\n            document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\r\n\r\n\r\n            const popup = document.createElement('div');\r\n            popup.classList.add('popup');\r\n\r\n            const message = document.createElement('p');\r\n            message.textContent = 'Do you want to add this rectangle?';\r\n\r\n            const acceptButton = document.createElement('button');\r\n            acceptButton.textContent = 'Add';\r\n\r\n            const cancelButton = document.createElement('button');\r\n            cancelButton.textContent = 'Cancel';\r\n\r\n\r\n            acceptButton.addEventListener('click', () => {\r\n\r\n                let cancelFormSubmitPromise = false;\r\n\r\n                drawingManager.setOptions({\r\n                    drawingControl: false,\r\n                });\r\n\r\n                drawingManager.setDrawingMode(null);\r\n\r\n                rectangle.setEditable(false);\r\n\r\n                popup.remove();\r\n                document.getElementById(\"createField\").classList.remove(\"hidden\");\r\n\r\n\r\n                // get the area of the rectangle\r\n                const area = window.google.maps.geometry.spherical.computeArea(rectangle.getBounds()).toFixed(0);\r\n\r\n                console.log('Rectangle Area:', area);\r\n\r\n                const formSubmitPromise = new Promise((resolve, reject) => {\r\n                    document.getElementById(\"createField\").addEventListener(\"submit\", (event) => {\r\n                        event.preventDefault();\r\n                        if (!cancelFormSubmitPromise) {\r\n                            resolve(); // resolve the promise when the form is submitted\r\n                        } else {\r\n                            reject();\r\n                        }\r\n                    });\r\n                });\r\n\r\n                document.getElementById(\"cancelNewField\").addEventListener(\"click\", () => {\r\n                    cancelFormSubmitPromise = true;\r\n                });\r\n\r\n                formSubmitPromise.then(() => {\r\n\r\n                    const bounds = rectangle.getBounds();\r\n                    const coordinates = {\r\n                        north: bounds.getNorthEast().lat(),\r\n                        east: bounds.getNorthEast().lng(),\r\n                        south: bounds.getSouthWest().lat(),\r\n                        west: bounds.getSouthWest().lng(),\r\n                    };\r\n\r\n                    const lat = (parseFloat(coordinates.north) + parseFloat(coordinates.south)) / 2;\r\n                    const lng = (parseFloat(coordinates.east) + parseFloat(coordinates.west)) / 2;\r\n\r\n                    /*const marker = new window.google.maps.Marker({\r\n                        position: { lat: lat, lng: lng },\r\n                        map: map,\r\n                        label: {\r\n                            text: document.getElementById(\"fieldName\").value,\r\n                            color: \"#ffffff\",\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"10px\",\r\n                        },\r\n                        icon: {\r\n                            path: window.google.maps.SymbolPath.CIRCLE,\r\n                            scale: 0,\r\n                        },\r\n\r\n                    });*/\r\n\r\n\r\n                    // convert coordinates string with ; to array\r\n                    const coordinatesString = coordinates.north + \";\" + coordinates.east + \";\" + coordinates.south + \";\" + coordinates.west;\r\n\r\n                    // get the form data\r\n                    const fieldName = document.getElementById(\"fieldName\").value;\r\n                    const cropType = document.getElementById(\"cropType\").value;\r\n\r\n\r\n                    // call the backend to add the coordinates\r\n                    axios.post(URL + 'createfield/', {\r\n                        name: fieldName,\r\n                        crop_type: cropType,\r\n                        type: \"rectangle\",\r\n                        coordinates: coordinatesString,\r\n                        area: area,\r\n                        farm: this.props.farmDetails.id,\r\n                    }).then((res) => {\r\n                        var table = document.getElementById(\"fieldTable\").getElementsByTagName('tbody')[0];\r\n\r\n\r\n                        var row = table.insertRow(0);\r\n\r\n                        var cell1 = row.insertCell(0);\r\n                        var cell2 = row.insertCell(1);\r\n                        var cell3 = row.insertCell(2);\r\n\r\n\r\n                        cell1.innerHTML = \"<span>\" + fieldName + \"</span>\";\r\n                        cell2.innerHTML = \"<span>\" + area + \"</span> m2\";\r\n                        cell3.innerHTML = \"<span>\" + cropType + \"</span>\";\r\n\r\n\r\n                        rectangle.isComplete = true;\r\n\r\n                        row.addEventListener(\"click\", () => {\r\n                            map.setCenter({ lat: lat, lng: lng });\r\n                            map.setZoom(15);\r\n                        });\r\n\r\n                    }).catch((err) => {\r\n                        console.log(err);\r\n                        rectangle.setMap(null);\r\n                    });\r\n\r\n\r\n                    rectangle.addListener(\"mouseover\", () => {\r\n                        this.highlightRow(fieldName);\r\n                    });\r\n\r\n                    rectangle.addListener(\"mouseout\", () => {\r\n                        this.unhighlightRow(fieldName);\r\n                    });\r\n\r\n\r\n                    document.getElementById(\"fieldName\").value = \"\";\r\n                    document.getElementById(\"cropType\").value = \"\";\r\n                });\r\n            });\r\n\r\n            cancelButton.addEventListener('click', () => {\r\n                document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\r\n                rectangle.setMap(null);\r\n                drawingManager.setOptions({\r\n                    drawingControl: true,\r\n                });\r\n                popup.remove();\r\n            });\r\n\r\n            popup.appendChild(message);\r\n            popup.appendChild(acceptButton);\r\n            popup.appendChild(cancelButton);\r\n\r\n            // show the popup on the div, but outside the map\r\n            document.getElementById(\"add\").appendChild(popup);\r\n\r\n\r\n        });\r\n\r\n        drawingManager.setMap(map);\r\n    }\r\n\r\n\r\n    createField(event) {\r\n        event.preventDefault();\r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n        document.getElementById(\"fieldTable\").classList.remove(\"hidden\");\r\n        document.getElementById(\"cancelNewField\").classList.add(\"hidden\");\r\n        document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\r\n    }\r\n\r\n\r\n\r\n\r\n    /*cancel() {\r\n        document.getElementById(\"createField\").classList.add(\"hidden\");\r\n    }*/\r\n\r\n    showFieldForm() {\r\n\r\n        document.getElementById(\"fieldTable\").classList.toggle(\"hidden\");\r\n\r\n        // check if table is hidden\r\n        if (document.getElementById(\"fieldTable\").classList.contains(\"hidden\")) {\r\n            document.getElementById('cancelNewField').classList.remove('hidden');\r\n            document.getElementById(\"addFieldsHeader\").classList.remove(\"hidden\");\r\n\r\n        } else {\r\n            document.getElementById('cancelNewField').classList.add('hidden');\r\n            document.getElementById(\"addFieldsHeader\").classList.add(\"hidden\");\r\n            document.getElementById(\"createField\").classList.add(\"hidden\");\r\n        }\r\n\r\n    }\r\n\r\n    showData(sensorData) {\r\n        // set modal open to true and send the sensor data to the modal\r\n        this.setState({ modalOpen: true, sensorData: sensorData });\r\n    }\r\n\r\n    highlightRow(fieldName) {\r\n        const table = document.getElementById(\"fieldTable\"); // Replace \"your-table-id\" with the actual ID of your table\r\n        const rows = table.getElementsByTagName(\"tr\");\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const firstColumnValue = row.cells[0].textContent.trim();\r\n\r\n            if (firstColumnValue === fieldName) {\r\n                row.style.backgroundColor = \"#D0FFBC\"; //\r\n                // change the color of the background of the row\r\n            }\r\n        }\r\n    }\r\n\r\n    unhighlightRow(fieldName) {\r\n        const table = document.getElementById(\"fieldTable\");\r\n        const rows = table.getElementsByTagName(\"tr\");\r\n\r\n        for (let i = 0; i < rows.length; i++) {\r\n            const row = rows[i];\r\n            const firstColumnValue = row.cells[0].textContent.trim();\r\n\r\n            if (firstColumnValue === fieldName) {\r\n                row.style.backgroundColor = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { modalOpen } = this.state;\r\n\r\n        return (\r\n            <>\r\n                \r\n                <button onClick={this.centreToMap} id=\"centreToMap\" className={`fieldsTableBtn ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`}><i className=\"fa-solid fa-location-crosshairs\"></i></button> \r\n                <div id=\"map\">\r\n                    {modalOpen && (\r\n                        <Modal setOpenModal={(isOpen) => this.setState({ modalOpen: isOpen })}\r\n                        sensorData={this.state.sensorData}\r\n                         />\r\n                    )}\r\n                </div>\r\n                <div className=\"fieldsTableConatiner\">\r\n\r\n                    <h2 className=\"hidden\" id=\"addFieldsHeader\">Use the rectangle/polygon tool to draw the field onto map</h2>\r\n                    <button  onClick={this.showFieldForm} id=\"cancelNewField\" className={`fieldsTableBtn hidden ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`}><i class='fa-solid fa-xmark'></i> Cancel</button>                   \r\n\r\n                    <form id=\"createField\" className=\"hidden\" onSubmit={this.createField}>\r\n                        <label htmlFor=\"name\">Field Name</label>\r\n                        <input required type=\"text\" name=\"name\" id=\"fieldName\" placeholder=\"enter name\" />\r\n                        <label htmlFor=\"name\">Crop</label>\r\n                        <input required type=\"text\" name=\"crop_type\" id=\"cropType\" placeholder=\"select type\" />\r\n                        <input id=\"loginInBtn\" type=\"submit\" value=\"Create Field\" />\r\n                    </form>\r\n\r\n                    <div id=\"add\"></div>\r\n\r\n                    <table id='fieldTable' className={`fieldsTable ${localStorage.getItem(\"darkMode\") === \"true\" ? \"darkMode\" : ''}`}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th><h2>Field</h2></th>\r\n                                <th><h2>Land Area</h2></th>\r\n                                <th><h2>Crop</h2></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <td colspan=\"4\" >\r\n                                    {this.props.user.role === 'farmer' || this.props.user.role === 'field manager' ? null :\r\n                                        <button  onClick={this.showFieldForm} id=\"addNewField\" className={`fieldsTableBtn`}> <i className=\"fa-solid fa-plus\"></i> Add Field</button>                   \r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                   \r\n\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Maps;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}