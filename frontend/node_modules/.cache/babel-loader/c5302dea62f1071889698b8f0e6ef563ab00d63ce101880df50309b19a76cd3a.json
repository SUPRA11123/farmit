{"ast":null,"code":"var _jsxFileName = \"/Users/ewanallison/Desktop/FarmIT/github/Untitled/frontend/src/components/Dashboard/Utilities/Modal.js\";\nimport React from \"react\";\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nimport { Chart } from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.exportDataToCSV = () => {\n      // Show the date inputs\n      this.setState({\n        showDateInputs: true\n      });\n    };\n    this.handleStartDateChange = event => {\n      this.setState({\n        startDate: event.target.value\n      });\n    };\n    this.handleEndDateChange = event => {\n      this.setState({\n        endDate: event.target.value\n      });\n    };\n    this.handleExportCSV = () => {\n      const {\n        startDate,\n        endDate\n      } = this.state;\n      // Perform the CSV export with the selected start and end dates\n\n      console.log(\"Exporting CSV data from\", startDate, \"to\", endDate);\n\n      // get data from influxdb\n      const influxDB = new InfluxDB({\n        url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n        token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\"\n      });\n      const queryApi = influxDB.getQueryApi(\"FarmIT\");\n      const testQuery = `\n    from(bucket: \"test\")\n    |> range(start: ${startDate}, stop: ${endDate})\n    |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n    |> filter(fn: (r) => r[\"_field\"] == \"decoded_payload_temperature\" or r[\"_field\"] == \"decoded_payload_humidity\")\n  `;\n      let data = [];\n      const fetchTestData = queryApi.queryRows(testQuery, {\n        next: (row, tableMeta) => {\n          const time = row[4];\n          const variable = row[6] === \"decoded_payload_temperature\" ? \"temperature\" : \"humidity\";\n          const value = row[5];\n          const existingData = data.find(item => item.time === time);\n          if (existingData) {\n            existingData[variable] = value;\n          } else {\n            const newData = {\n              time\n            };\n            newData[variable] = value;\n            data.push(newData);\n          }\n        },\n        error: error => {\n          console.error(\"Error occurred during test query:\", error);\n        },\n        complete: () => {\n          console.log(\"Query completed\");\n          console.log(data);\n\n          // Sort the data array by time in ascending order\n          data.sort((a, b) => new Date(a.time) - new Date(b.time));\n\n          // Create the CSV content\n          let csvContent = \"data:text/csv;charset=utf-8,\";\n          csvContent += \"time,temperature,humidity\\r\\n\";\n          data.forEach(item => {\n            csvContent += `${item.time},${item.temperature || \"\"},${item.humidity || \"\"}\\r\\n`;\n          });\n          var encodedUri = encodeURI(csvContent);\n          var link = document.createElement(\"a\");\n          link.setAttribute(\"href\", encodedUri);\n          link.setAttribute(\"download\", \"my_data.csv\");\n          document.body.appendChild(link); // Required for FF\n\n          link.click();\n          // Perform further operations with the data here\n        }\n      });\n\n      Promise.all([fetchTestData]).catch(error => {\n        console.error(\"Error occurred during queries:\", error);\n      });\n\n      // After exporting, reset the state and hide the date inputs\n      this.setState({\n        startDate: \"\",\n        endDate: \"\",\n        showDateInputs: false\n      });\n    };\n    this.state = {\n      temperatureData: [],\n      humidityData: [],\n      startDate: \"\",\n      endDate: \"\",\n      showDateInputs: false\n    };\n    this.chartRef = /*#__PURE__*/React.createRef();\n    this.chart = null;\n  }\n  componentDidMount() {\n    this.fetchData(); // Fetch data initially\n\n    // Fetch data every 20 seconds\n    this.interval = setInterval(() => {\n      this.fetchData();\n    }, 20000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval); // Clear the interval when the component unmounts\n  }\n\n  fetchData() {\n    // Create a new InfluxDB instance\n    const influxDB = new InfluxDB({\n      url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n      token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\"\n    });\n    const queryApi = influxDB.getQueryApi(\"FarmIT\");\n    const temperatureQuery = `\n      from(bucket: \"test\")\n      |> range(start: -5m) \n      |> filter(fn: (r) =>\n        r._measurement == \"mqtt_consumer\" and\n        r._field == \"decoded_payload_temperature\" and\n        r.topic == \"v3/farmit@ttn/devices/${this.props.sensorData.sensorId}/up\" and\n        exists r._value\n      )\n    `;\n    const humidityQuery = `\n      from(bucket: \"test\")\n      |> range(start: -5m)\n      |> filter(fn: (r) =>\n        r._measurement == \"mqtt_consumer\" and\n        r._field == \"decoded_payload_humidity\" and\n        r.topic == \"v3/farmit@ttn/devices/${this.props.sensorData.sensorId}/up\" and\n        exists r._value\n      )\n    `;\n    const fetchTemperatureData = queryApi.queryRows(temperatureQuery, {\n      next: (row, tableMeta) => {\n        this.setState(prevState => {\n          const temperatureData = [...prevState.temperatureData, {\n            ...row\n          }];\n          const temperatureValues = temperatureData.map(row => row[\"5\"]);\n          return {\n            temperatureData,\n            temperatureValues\n          };\n        });\n      },\n      error: error => {\n        console.error(\"Error occurred during temperature query:\", error);\n      },\n      complete: () => {\n        this.updateChart();\n      }\n    });\n    const fetchHumidityData = queryApi.queryRows(humidityQuery, {\n      next: (row, tableMeta) => {\n        this.setState(prevState => {\n          const humidityData = [...prevState.humidityData, {\n            ...row\n          }];\n          const humidityValues = humidityData.map(row => row[\"5\"]);\n          return {\n            humidityData,\n            humidityValues\n          };\n        });\n      },\n      error: error => {\n        console.error(\"Error occurred during humidity query:\", error);\n      },\n      complete: () => {\n        this.updateChart();\n      }\n    });\n    Promise.all([fetchTemperatureData, fetchHumidityData]).catch(error => {\n      console.error(\"Error occurred during queries:\", error);\n    });\n  }\n  updateChart() {\n    const {\n      humidityData,\n      temperatureData\n    } = this.state;\n    const chartRef = this.chartRef.current;\n    if (chartRef) {\n      const chartContext = chartRef.getContext(\"2d\");\n\n      // Extract the timestamps and values from humidityData\n      const humidityTimestamps = humidityData.map(row => {\n        const utcTimestamp = row[\"4\"];\n        const localTimestamp = new Date(utcTimestamp).toLocaleTimeString();\n        return localTimestamp;\n      });\n      const humidityValues = humidityData.map(row => row[\"5\"]);\n      const temperatureValues = temperatureData.map(row => row[\"5\"]);\n\n      // Check if both temperature and humidity data have the same length\n      if (humidityValues.length !== temperatureValues.length) {\n        return;\n      }\n      if (!this.chart) {\n        // Create a new chart if it doesn't exist\n        this.chart = new Chart(chartContext, {\n          type: \"line\",\n          data: {\n            labels: [],\n            datasets: [{\n              data: [],\n              borderColor: \"blue\",\n              fill: false,\n              label: \"Humidity (%)\"\n            }, {\n              data: [],\n              borderColor: \"red\",\n              fill: false,\n              label: \"Temperature (ÂºC)\"\n            }]\n          },\n          options: {\n            plugins: {\n              legend: {\n                display: true // Display the legend\n              }\n            },\n\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: \"Value\"\n                }\n              },\n              x: {\n                title: {\n                  display: true,\n                  text: \"Time\"\n                }\n              }\n            },\n            animation: {\n              duration: 500 // Animation duration in milliseconds\n            }\n          }\n        });\n      }\n\n      // Calculate the range of data points to show\n      const maxDataPoints = 10; // Maximum number of data points to show\n      const startIdx = Math.max(humidityTimestamps.length - maxDataPoints, 0);\n      const endIdx = humidityTimestamps.length - 1;\n\n      // Update the chart with the new data\n      this.chart.data.labels = humidityTimestamps.slice(startIdx, endIdx + 1);\n      this.chart.data.datasets[0].data = humidityValues.slice(startIdx, endIdx + 1);\n      this.chart.data.datasets[1].data = temperatureValues.slice(startIdx, endIdx + 1);\n      this.chart.update();\n    }\n  }\n  render() {\n    const {\n      setOpenModal\n    } = this.props;\n    const {\n      showDateInputs,\n      startDate,\n      endDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modalBackground\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modalContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"titleCloseBtn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setOpenModal(false),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Field data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title2\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Real-Time Temperature and Humidity Values From Sensor \", this.props.sensorData.sensorId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: this.chartRef,\n              style: {\n                height: \"450px\",\n                width: \"700px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), showDateInputs && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"startDate\",\n              children: \"Start Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"startDate\",\n              value: startDate,\n              onChange: this.handleStartDateChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"endDate\",\n              children: \"End Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"endDate\",\n              value: endDate,\n              onChange: this.handleEndDateChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.handleExportCSV,\n              children: \"Export\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this), !showDateInputs && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"exportButton\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.exportDataToCSV,\n              children: [\"CSV \", /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa-sharp fa-solid fa-download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 60\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Modal;","map":{"version":3,"names":["React","InfluxDB","Chart","jsxDEV","_jsxDEV","Modal","Component","constructor","props","exportDataToCSV","setState","showDateInputs","handleStartDateChange","event","startDate","target","value","handleEndDateChange","endDate","handleExportCSV","state","console","log","influxDB","url","token","queryApi","getQueryApi","testQuery","data","fetchTestData","queryRows","next","row","tableMeta","time","variable","existingData","find","item","newData","push","error","complete","sort","a","b","Date","csvContent","forEach","temperature","humidity","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","Promise","all","catch","temperatureData","humidityData","chartRef","createRef","chart","componentDidMount","fetchData","interval","setInterval","componentWillUnmount","clearInterval","temperatureQuery","sensorData","sensorId","humidityQuery","fetchTemperatureData","prevState","temperatureValues","map","updateChart","fetchHumidityData","humidityValues","current","chartContext","getContext","humidityTimestamps","utcTimestamp","localTimestamp","toLocaleTimeString","length","type","labels","datasets","borderColor","fill","label","options","plugins","legend","display","responsive","maintainAspectRatio","scales","y","beginAtZero","max","title","text","x","animation","duration","maxDataPoints","startIdx","Math","endIdx","slice","update","render","setOpenModal","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","height","width","htmlFor","id","onChange","class"],"sources":["/Users/ewanallison/Desktop/FarmIT/github/Untitled/frontend/src/components/Dashboard/Utilities/Modal.js"],"sourcesContent":["import React from \"react\";\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nimport { Chart } from \"chart.js/auto\";\n\n\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperatureData: [],\n      humidityData: [],\n      startDate: \"\",\n      endDate: \"\",\n      showDateInputs: false,\n    };\n    this.chartRef = React.createRef();\n    this.chart = null;\n\n  }\n\n  componentDidMount() {\n\n    this.fetchData(); // Fetch data initially\n\n    // Fetch data every 20 seconds\n    this.interval = setInterval(() => {\n      this.fetchData();\n    }, 20000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval); // Clear the interval when the component unmounts\n  }\n\n  fetchData() {\n    // Create a new InfluxDB instance\n    const influxDB = new InfluxDB({\n      url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n      token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\",\n    });\n\n    const queryApi = influxDB.getQueryApi(\"FarmIT\");\n\n    const temperatureQuery = `\n      from(bucket: \"test\")\n      |> range(start: -5m) \n      |> filter(fn: (r) =>\n        r._measurement == \"mqtt_consumer\" and\n        r._field == \"decoded_payload_temperature\" and\n        r.topic == \"v3/farmit@ttn/devices/${this.props.sensorData.sensorId}/up\" and\n        exists r._value\n      )\n    `;\n\n    const humidityQuery = `\n      from(bucket: \"test\")\n      |> range(start: -5m)\n      |> filter(fn: (r) =>\n        r._measurement == \"mqtt_consumer\" and\n        r._field == \"decoded_payload_humidity\" and\n        r.topic == \"v3/farmit@ttn/devices/${this.props.sensorData.sensorId}/up\" and\n        exists r._value\n      )\n    `;\n\n    const fetchTemperatureData = queryApi.queryRows(temperatureQuery, {\n      next: (row, tableMeta) => {\n        this.setState((prevState) => {\n          const temperatureData = [...prevState.temperatureData, { ...row }];\n          const temperatureValues = temperatureData.map((row) => row[\"5\"]);\n          return { temperatureData, temperatureValues };\n        });\n      },\n      error: (error) => {\n        console.error(\"Error occurred during temperature query:\", error);\n      },\n      complete: () => {\n        this.updateChart();\n      },\n    });\n\n    const fetchHumidityData = queryApi.queryRows(humidityQuery, {\n      next: (row, tableMeta) => {\n        this.setState((prevState) => {\n          const humidityData = [...prevState.humidityData, { ...row }];\n          const humidityValues = humidityData.map((row) => row[\"5\"]);\n          return { humidityData, humidityValues };\n        });\n      },\n      error: (error) => {\n        console.error(\"Error occurred during humidity query:\", error);\n      },\n      complete: () => {\n        this.updateChart();\n      },\n    });\n\n    Promise.all([fetchTemperatureData, fetchHumidityData])\n      .catch((error) => {\n        console.error(\"Error occurred during queries:\", error);\n      });\n  }\n\n  exportDataToCSV = () => {\n    // Show the date inputs\n    this.setState({ showDateInputs: true });\n  };\n\n  handleStartDateChange = (event) => {\n    this.setState({ startDate: event.target.value });\n  };\n\n  handleEndDateChange = (event) => {\n    this.setState({ endDate: event.target.value });\n  };\n\n  handleExportCSV = () => {\n    const { startDate, endDate } = this.state;\n    // Perform the CSV export with the selected start and end dates\n\n    console.log(\"Exporting CSV data from\", startDate, \"to\", endDate);\n\n    // get data from influxdb\n    const influxDB = new InfluxDB({\n      url: \"https://eu-central-1-1.aws.cloud2.influxdata.com\",\n      token: \"WWs7Muam9CP-Y65yjsLgz9VVuzS9mfuwWmlFgJJjiLTKjPUdZGXdTpfQtG0ULZ5a2iy8z54rfbS5nPtUb6qWKg==\",\n\n    });\n\n    const queryApi = influxDB.getQueryApi(\"FarmIT\");\n\n    const testQuery = `\n    from(bucket: \"test\")\n    |> range(start: ${startDate}, stop: ${endDate})\n    |> filter(fn: (r) => r[\"_measurement\"] == \"mqtt_consumer\")\n    |> filter(fn: (r) => r[\"_field\"] == \"decoded_payload_temperature\" or r[\"_field\"] == \"decoded_payload_humidity\")\n  `;\n\n  let data = [];\n\n  const fetchTestData = queryApi.queryRows(testQuery, {\n    next: (row, tableMeta) => {\n      const time = row[4];\n      const variable = row[6] === \"decoded_payload_temperature\" ? \"temperature\" : \"humidity\";\n      const value = row[5];\n      \n      const existingData = data.find((item) => item.time === time);\n      if (existingData) {\n        existingData[variable] = value;\n      } else {\n        const newData = { time };\n        newData[variable] = value;\n        data.push(newData);\n      }\n    },\n    error: (error) => {\n      console.error(\"Error occurred during test query:\", error);\n    },\n    complete: () => {\n      console.log(\"Query completed\");\n      console.log(data);\n  \n      // Sort the data array by time in ascending order\n      data.sort((a, b) => new Date(a.time) - new Date(b.time));\n  \n      // Create the CSV content\n      let csvContent = \"data:text/csv;charset=utf-8,\";\n      csvContent += \"time,temperature,humidity\\r\\n\";\n      data.forEach((item) => {\n        csvContent += `${item.time},${item.temperature || \"\"},${item.humidity || \"\"}\\r\\n`;\n      });\n  \n      var encodedUri = encodeURI(csvContent);\n  \n      var link = document.createElement(\"a\");\n  \n      link.setAttribute(\"href\", encodedUri);\n  \n      link.setAttribute(\"download\", \"my_data.csv\");\n  \n      document.body.appendChild(link); // Required for FF\n  \n      link.click();\n      // Perform further operations with the data here\n    },\n  });\n\n    Promise.all([fetchTestData])\n      .catch((error) => {\n        console.error(\"Error occurred during queries:\", error);\n      });\n\n    // After exporting, reset the state and hide the date inputs\n    this.setState({ startDate: \"\", endDate: \"\", showDateInputs: false });\n  };\n\n \n\n\n  updateChart() {\n    const { humidityData, temperatureData } = this.state;\n    const chartRef = this.chartRef.current;\n\n    if (chartRef) {\n      const chartContext = chartRef.getContext(\"2d\");\n\n      // Extract the timestamps and values from humidityData\n      const humidityTimestamps = humidityData.map((row) => {\n        const utcTimestamp = row[\"4\"];\n        const localTimestamp = new Date(utcTimestamp).toLocaleTimeString();\n        return localTimestamp;\n      });\n\n      const humidityValues = humidityData.map((row) => row[\"5\"]);\n      const temperatureValues = temperatureData.map((row) => row[\"5\"]);\n\n      // Check if both temperature and humidity data have the same length\n      if (humidityValues.length !== temperatureValues.length) {\n        return;\n      }\n\n\n      if (!this.chart) {\n\n        // Create a new chart if it doesn't exist\n        this.chart = new Chart(chartContext, {\n          type: \"line\",\n          data: {\n            labels: [],\n            datasets: [\n              {\n                data: [],\n                borderColor: \"blue\",\n                fill: false,\n                label: \"Humidity (%)\",\n              },\n              {\n                data: [],\n                borderColor: \"red\",\n                fill: false,\n                label: \"Temperature (ÂºC)\",\n              },\n            ],\n          },\n          options: {\n            plugins: {\n              legend: {\n                display: true, // Display the legend\n              },\n            },\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true,\n                max: 100,\n                title: {\n                  display: true,\n                  text: \"Value\",\n                },\n              },\n              x: {\n                title: {\n                  display: true,\n                  text: \"Time\",\n                },\n              },\n            },\n            animation: {\n              duration: 500, // Animation duration in milliseconds\n            },\n          },\n        });\n      }\n\n      // Calculate the range of data points to show\n      const maxDataPoints = 10; // Maximum number of data points to show\n      const startIdx = Math.max(humidityTimestamps.length - maxDataPoints, 0);\n      const endIdx = humidityTimestamps.length - 1;\n\n      // Update the chart with the new data\n      this.chart.data.labels = humidityTimestamps.slice(startIdx, endIdx + 1);\n      this.chart.data.datasets[0].data = humidityValues.slice(startIdx, endIdx + 1);\n      this.chart.data.datasets[1].data = temperatureValues.slice(startIdx, endIdx + 1);\n      this.chart.update();\n    }\n  }\n\n\n\n\n  render() {\n    const { setOpenModal } = this.props;\n\n    const { showDateInputs, startDate, endDate } = this.state;\n\n    return (\n      <div className=\"modalBackground\">\n        <div className=\"modalContainer\">\n          <div className=\"titleCloseBtn\">\n            <button onClick={() => setOpenModal(false)}>X</button>\n          </div>\n          <div className=\"title\">\n            <h5>Field data</h5>\n          </div>\n          <div className=\"title2\">\n            <h1>Real-Time Temperature and Humidity Values From Sensor {this.props.sensorData.sensorId}</h1>\n          </div>\n          <div className=\"body\">\n            <div>\n              <canvas ref={this.chartRef} style={{ height: \"450px\", width: \"700px\" }} />\n            </div>\n            <br />\n            {showDateInputs && (\n              <div>\n                <label htmlFor=\"startDate\">Start Date:</label>\n                <input type=\"text\" id=\"startDate\" value={startDate} onChange={this.handleStartDateChange} />\n                <br />\n                <label htmlFor=\"endDate\">End Date:</label>\n                <input type=\"text\" id=\"endDate\" value={endDate} onChange={this.handleEndDateChange} />\n                <br />\n                <button onClick={this.handleExportCSV}>Export</button>\n              </div>\n            )}\n            {!showDateInputs && (\n              <div className=\"exportButton\">\n                <button onClick={this.exportDataToCSV}>CSV <i class=\"fa-sharp fa-solid fa-download\"></i></button>\n              </div>\n            )}\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Modal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}